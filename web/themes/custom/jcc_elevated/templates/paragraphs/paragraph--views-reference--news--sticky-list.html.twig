{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{{ attach_library("jcc_storybook/Section") }}
{{ attach_library("jcc_storybook/TeaserPlusList") }}

{% set variant = paragraph.field_variant.value|json_decode %}
{% set teaser = {} %}
{% set list_items = [] %}

{% set row = sticky_list[0] %}

{% if row['#node'] %}
  {% set teaser = {
    brow_data: {
      part_one: row['#node'].field_news_type.0.entity.name.value|default(''),
      part_two: row['#node'].field_date.0.value|date('M d, Y')|default(''),
    },
    heading: row['#node'].title()|default(''),
    href: url('entity.node.canonical', {'node': row['#node'].id()})|render,
    text: excerpts[0]|default(''),
  } %}
{% endif %}

{% for i in 1..3 %}
  {% set row = sticky_list[i] %}

  {% if row['#node'] %}
    {% set item = {
      link: {
        label: row['#node'].title(),
        href: url('entity.node.canonical', { 'node': row['#node'].id() })|render,
      },
      footer: row['#node'].field_date.0.value|date('M d, Y'),
    } %}
    {% set list_items = list_items|merge([item]) %}
  {% endif %}

{% endfor %}

{% set button_data = {
  label: 'See all news',
  href: news_url,
  variant: "primary",
} %}

{% include "@organisms/TeaserPlusList/TeaserPlusList.twig" with {
    heading: 'News and Announcements',
    teaser: teaser,
    list_items: list_items,
    button_data: button_data,
} %}
