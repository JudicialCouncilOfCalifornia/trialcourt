{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}

{{ attach_library("jcc_storybook/HeroHangover") }}
{{ attach_library("jcc_storybook/Section") }}
{{ attach_library("jcc_storybook/List") }}
{{ attach_library("jcc_storybook/Button") }}

{% set button %}
  {% if job.details.job_id.value or job.custom_apply.url %}
    {# Link to HREMs using job ID unless custom. #}
    {% set apply = 'https://careers.jud.ca.gov/psc/HRPRDCG/EMPLOYEE/HRMS/c/HRS_HRAM_FL.HRS_CG_SEARCH_FL.GBL?Page=HRS_APP_JBPST_FL&Action=U&FOCUS=Applicant&SiteId=1&JobOpeningId=' ~ job.details.job_id.value ~ '&PostingSeq=2' %}
    {% include "@atoms/Button/Button.twig" with {
      variant: 'secondary',
      size: 'normal',
      label: job.custom_apply.label ? job.custom_apply.label : 'Apply to Job',
      href: job.custom_apply.url ? job.custom_apply.url : apply,
    } %}
  {% endif %}
{% endset %}

{% set details %}
  <div>
    {% set items = [] %}
    {% for key, value in job.details %}
      {% if value.value is not empty %}
        {% set item = {
          label: value.label|raw,
          text: value.value,
        } %}
        {% set items = items|merge([item]) %}
      {% endif %}
    {% endfor %}
    {% include "@molecules/List/List.twig" with {
      variant: 'none',
      wider_span: 'true',
      items: items,
    } %}

    {{ button }}
  </div>
{% endset %}

{% include "@molecules/HeroHangover/HeroHangover.twig" with {
  background: 'striped-base-light-xx',
  heading: node.title.value,
  media: false,
  attributes: create_attribute()
} %}

{% set description %}
  {% set no_description %}
    <p>{{ 'Job description to come.'|t }}</p>
  {% endset %}
  <div>
    {{ content.body.0 ? content.body.0|render : no_description }}
    {{ job.boilerplate }}
    {{ button }}
  </div>
{% endset %}

{% include "@organisms/Section/Section.twig" with {
  variant: 'default',
  sub_component_layout: 'with-sidebar grid',
  sidebar_direction: 'row',
  sidebar_width: 39,
  gap: 's4',
  sub_component_data: {
    details,
    description,
  },
  attributes: create_attribute()
} %}
