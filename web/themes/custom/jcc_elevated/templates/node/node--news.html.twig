{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}

{{ attach_library("jcc_storybook/Brow") }}
{{ attach_library("jcc_storybook/HeroHangover") }}
{{ attach_library("jcc_storybook/Section") }}
{{ attach_library("jcc_storybook/Body") }}
{{ attach_library("jcc_storybook/Card") }}
{{ attach_library("jcc_storybook/List") }}

{% set components = [] %}
{% for k, component in content.field_components if k|first != "#" %}
  {% set components = components|merge([component]) %}
{% endfor %}

<article{{ attributes }}>
   {% block layout %} 
   {% if imageurl is not empty %}
    {% set imageTag %}
    <img src={{imageurl}} />
    {% endset %} 
  {% endif %}   
   
  {% set hangover_content %} 
    {% include "@molecules/Card/Card.twig" with {
      variant: "media-right",
      aspect: [],
      clickable_card: false,
      background: null,
      media: imageTag,
      caption_overlay: true,
      citation: citation,
      caption_in_image: true,
      media_caption: {
      show: true,
      text:caption      
    },
    } %} 
  {% endset %} 

    {% if content.field_news_type['#title'] is null %}
      {% set newstype = '' %}
    {% else %}
     {% set newstype = content.field_news_type %}
    {% endif %}

    {% include "@molecules/HeroHangover/HeroHangover.twig" with {
      hangover_hide_compact: false,
      hangover_offset: 22,
      background: 'striped-base-light-xx',
      brow: {
        variant: 'default_with_date',
        part_one: newstype,
        part_two: content.field_date, 
      },
      heading: node.title.value,
      news_header: true,
      text: content.field_byline,
      hangover_content: hangover_content  
    } %}

    {% set sidebarimages %}
      {% for image in sidebarimages %}
        {% set sidebar_image = '' %}
          {% if image.url %}
            {% set sidebar_image %}
              {% set media_uri = profile.image.field_media_image.entity.uri.value %}
              <img src={{image.url}}>
            {% endset %}
          {% endif %}

        {% include "@molecules/Card/Card.twig" with {
          variant: "media-right",
          aspect: [0,0],
          clickable_card: false,
          background: null,
          media: sidebar_image | raw,
          caption_overlay: true,
          citation: image.citation,
          media_caption: {
          show: true,
          text: image.caption,
          caption_in_image: false,
        },
        } %} 
        {% endfor %}
    {% endset %}
   {% set news_content = content.body is not empty ? content.body : textshare %}

    <div class="container">    
    {% set content %}
      {% include "@molecules/Body/Body.twig" with {
        variant: "default",
      heading: "",
      lead: "",
      content: news_content,
      subheading: "",
      aside: sidebarimages
      } %}   
      {% if relatednewsdata %}     
      {% include "@molecules/List/List.twig" with {
            variant: 'none',
            heading: 'Related News',
            items: relatednewsdata,
            wider_span: 'true',
        } %}    
    {% endif %}  
      {% endset %} 
    </div>

    {% block section %}
        {% include "@organisms/Section/Section.twig" with {
          sub_component_layout: 'stack',
          sub_component_data: content,
          }      
        %}
    {% endblock %}
  {% endblock %}
</article>