{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}

{{ attach_library("jcc_storybook/HeroHangover") }}
{{ attach_library("jcc_storybook/Tabs") }}
{{ attach_library("jcc_storybook/Section") }}
{{ attach_library("jcc_storybook/Card") }}
{{ attach_library("jcc_storybook/Brow") }}
{{ attach_library("jcc_storybook/Share") }}
{{ attach_library("jcc_storybook/ViewResults") }}
{{ attach_library("jcc_storybook/ResultExcerpt") }}

{% set tabs_elems = {} %}

{% if hide_meetings_tab != 1 %}
  {% set tabs_elems = tabs_elems|merge({'meetings': {'label':'Meetings','content': content.meetings_tab}}) %}
{% endif %}

{% if content.field_updates_resources[0] is not empty %}
  {% set tabs_elems = tabs_elems|merge({'updates': {'label':'Updates & Resources','content': content.field_updates_resources}}) %}
{% endif %}

{% if content.field_members[0] is not empty %}
  {% set tabs_elems = tabs_elems|merge({'members': {'label':'Members','content': content.field_members}}) %}
{% endif %}

{% if content.field_subcommittees[0] is not empty %}
  {% set tabs_elems = tabs_elems|merge({'subcommittees': {'label':'Subcommittees','content': content.field_subcommittees}}) %}
{% endif %}

{% if content.field_news_reports[0] is not empty %}
  {% set tabs_elems = tabs_elems|merge({'news_reports': {'label':'News & reports','content': content.field_news_reports}}) %}
{% endif %}

{% if (content.field_about[0] is not empty) or (content.field_date_established[0] is not empty) %}
  {% set tabs_elems = tabs_elems|merge({'about': {'label':'About','content': content.about_tab }}) %}
{% endif %}

{% set tabs_elem %}
  {% include "@molecules/Tabs/Tabs.twig" with {
    open_on_load: open_on_load,
    items: tabs_elems
  } %}
{% endset %}

{% set main_content %}
  <div class="stack" style=" --gap: var(--s5); ">
    {{ meetings }}
    {{ tabs_elem }}
  </div>
{% endset %}

{% if node.field_contact_info is not empty or node.field_related_links is not empty %}
  {% set sidebar_content %}
    <div class="box">
      {% if node.field_contact_info is not empty %}
        <h4 class="sidebar-label">Contact Info</h4>
        {{ content.field_contact_info }}
      {% endif %}
      {% if node.field_related_links is not empty %}
        <h4 class="sidebar-label">Related links</h4>
        {{ content.field_related_links }}
      {% endif %}
    </div>
  {% endset %}
{% endif %}

{% if sidebar_content %}
  {% set sidebar %}
    <div class="main-sidebar">
      {% include "@molecules/Card/Card.twig" with {
        variant: "bordered",
        clickable_card: false,
        background: 'base-light-xxx',
        aspect: [],
        text: sidebar_content,
      } %}
    </div>
  {% endset %}
{% endif %}

<article{{ attributes }}>
  {% include "@molecules/HeroHangover/HeroHangover.twig" with {
    variant: 'with_print',
    news_header: true,
    background: 'striped-base-light-xx',
    brow: {
      part_one: content.field_advisory_body_type,
    },
    share: {
      print_url: 'javascript: window.print();',
      print_aria_label: 'Print advisory body',
      icon_path: url('<front>')|render ~ 'themes/contrib/jcc_storybook/src/assets/icons.svg',
    },
    heading: label,
    text: content.body,
  } %}

  {% include "@organisms/Section/Section.twig" with {
    variant: 'default',
    sub_component_layout: "flex flex--70-30",
    sidebar_direction: 'row',
    gap: '--s5',
    sub_component_data: {
      main_content,
      sidebar,
    },
    attributes: create_attribute()
  } %}

</article>
