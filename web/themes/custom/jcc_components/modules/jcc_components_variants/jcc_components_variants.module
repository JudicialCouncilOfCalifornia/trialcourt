<?php

/**
 * @file
 * Primary module hooks for jcc_components_variants module.
 */

use Drupal\Core\Render\Element;

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function jcc_components_variants_field_widget_entity_reference_paragraphs_form_alter(
  &$element,
  &$form_state,
  $context) {

  if (!empty($element['subform']['field_variant'])) {
    $variants = jcc_components_variants_preview($element['#paragraph_type']);
    if (!empty($variants['options'])) {
      $prefix = [
        '#type' => "inline_template",
        '#template' => $variants['prefix'],
      ];
      $element['subform']['field_variant']['widget']['#prefix'] = \Drupal::service('renderer')->render($prefix);
      $element['subform']['#attached']['library'][] = 'jcc_components_variants/variants';
    }
  }
  // We set subcomponent variant on the parent component so that it's applied
  // to all instances of the subcomponent. Authors can't mix and match variants
  // at the subcomponent.  i.e. every 'card' under 'cards' must be the same
  // card variant. Actual fields values are hidden through js/variants.js.
  if (!empty($element['subform']['field_components'])) {
    $prefix = '';
    if (!empty($element['subform']['field_sub_variant_card'])) {
      $prefix = jcc_components_variants_setup($element, 'card');
    }
    elseif (!empty($element['subform']['field_sub_variant'])) {
      $prefix = jcc_components_variants_setup($element, NULL);
    }

    if (!empty($prefix)) {
      $prefix = [
        '#type' => 'inline_template',
        '#template' => $prefix,
      ];
      if (!empty($element['subform']['field_sub_variant_card'])) {
        $element['subform']['field_sub_variant_card']['widget']['#prefix'] = \Drupal::service('renderer')->render($prefix);
      }
      elseif (!empty($element['subform']['field_sub_variant'])) {
        $element['subform']['field_sub_variant']['widget']['#prefix'] = \Drupal::service('renderer')->render($prefix);
      }
      $element['subform']['#attached']['library'][] = 'jcc_components_variants/variants';
    }
  }
}

/**
 * Setup variants preview for editing.
 *
 * @param string $type
 *   The type of component.
 *
 * @return array
 *   The setup for these components variants.
 */
function jcc_components_variants_setup($element, $type) {
  // Set up variants for each component allowed on the components field.
  $components = !empty($element['subform']['field_components']['widget']['add_more']) ? Element::children($element['subform']['field_components']['widget']['add_more']) : [];
  $prefix = '';

  foreach ($components as $component) {
    if (strpos($component, 'add_more_button_') === 0) {
      $sub_variant = $element['subform']['field_components']['widget']['add_more'][$component]['#bundle_machine_name'];
      if ($type && $sub_variant == $type) {
        $variants = jcc_components_variants_preview($sub_variant);

        if (!empty($variants['options'])) {
          $prefix .= $variants['prefix'];
        }
      }
      elseif (is_null($type)) {
        $variants = jcc_components_variants_preview($sub_variant);

        if (!empty($variants['options'])) {
          $prefix .= $variants['prefix'];
        }
      }
    }
  }

  return $prefix;
}

/**
 * Generate variants preview.
 *
 * @param string $type
 *   The type of component.
 *
 * @return array
 *   The populated details for these components variants.
 */
function jcc_components_variants_preview($type) {
  // Variants are defined by available variant preview images.
  $path = \Drupal::service('extension.list.module')->getPath('jcc_components_variants');
  $dir = "${path}/variants/${type}/";
  $files = preg_grep('/^([^.])/', scandir($dir));
  $variants = '';
  $options = [];
  $theme = \Drupal::config('system.theme')->get('default');

  // If elevated theme is in use.
  switch ($type) {
    case 'card':
      if ($theme == 'jcc_elevated') {
        $files = array_slice($files, 3);
      }
      else {
        $files = array_slice($files, 0, 3);
      }
      break;

    case 'hero_banner':
    case 'hero':
      if ($theme == 'jcc_elevated') {
        $files = array_slice($files, 2);
      }
      else {
        $files = array_slice($files, 0, 2);
      }
      break;
  }

  // Generate details and buttons for each variant image provided.
  foreach ($files as $file) {
    if (is_file($dir . $file)) {
      $name = substr(pathinfo($file, PATHINFO_FILENAME), 2);
      $variant = [
        'name' => $name,
        'file' => $file,
      ];
      $variants .= "<button class='variant' data-variant='" . $type . ":" . $variant['name'] . "'><img src='/${path}/variants/${type}/" . $variant['file'] . "' />\"${type}\":\"${name}\"</button>";
      $options[$variant['name']] = $variant['name'];
    }
  }

  $label = t(':type Variants', [':type' => $type]);
  $label = str_replace('_', ' ', $label);
  $prefix = '<details class="claro-details"><summary class="claro-details__summary">' . ucwords($label) . '</summary><div class="variants variants--${type}">' . $variants . '</div></details>';

  $preview = [
    'prefix' => $prefix,
    'options' => $options,
  ];

  return $preview;
}
