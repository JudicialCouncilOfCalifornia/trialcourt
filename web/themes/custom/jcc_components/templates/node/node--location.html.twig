{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}

{% set matters = [] %}

{% for k, matter in content.field_matters_served if k|first != "#" %}
  {% set item = [
    { text: matter['#plain_text'] }
  ] %}
  {% set matters = matters|merge(item) %}
{% endfor %}


{% set parking_transportation %}
      {% for item in public_transportation %}
        {% if item.url %}
          <div class = "jcc-parking-transport">
            <a {{ 'class=" jcc-button--primary ext"' }} href="{{ item.url }}">{{ item.title }}</a>
          </div>
        {% endif %}
      {% endfor %}
{% endset %}

{% set additional_content %}
  <div class="jcc-location__location jcc-small">
  {% if processed_address  %}
    {% set address = processed_address|render|replace({'<br>': ' ', '<br />': ' '})|trim %} 
    {% set address_url = 'https://maps.google.com/?q=' ~ address %}
    <div class="jcc-location__address jcc-location-hero-link">
        <a href="{{ address_url}}">{{ address }}</a>
    </div>
  {% endif %} 

  {% if content.field_phone %}
    {% set phone = content.field_phone.0['#title'] %}
    {% set phone_url = "tel:" ~ content.field_phone.0['#title'] %}
    <div class="jcc-location-hero-link">
      <a href="{{ phone_url}}">{{ phone }}</a>
    </div>
  {% endif %}
  </div>
{% endset %}

{% include '@molecules/hero/hero.twig' with {
    hero: {
      main: {
        brow:  content.field_brow[0]['#context']['value'],
        title: label,
        lead: additional_content
        },
      aside:{
        media:{
          src: file_url(node.field_image_of_the_courthouse[0].entity.uri.value),
          alt: node.field_image_of_the_courthouse[0].alt,
        }
      },
      layout: "location-details"
    }
} %}


{% set formatted_array = [] %}
{% set orignal_array = case_category_terms %}
{% for key ,value  in orignal_array  %}
  {% set formatted_array  = formatted_array|merge([{'text' : value}]) %}
{% endfor %}

{% set main_content = {
    entries: [
        {
            type: 'section',
            heading: "Building Information",
            content: "Building hours: Monday - Friday: "~ content.group_building_hours.field_building_hours.0["#text"]|split(' ', 2)[1] ~ " - " ~ content.group_building_hours.field_building_hours_to.0["#text"]|split(' ', 2)[1],
            width: "partial",
            name: "location_details",
        },
        {
            type: 'section',
            heading: "Case Served",
            width: "partial",
            content: "<p> will have tags</p>",
            name: "location_details",
            sub_sections: [
                {
                    type: 'sub_section',
                    tags:formatted_array
                }
            ]
        },
        {
            type: 'section',
            width: "partial",
            heading: "Services",
            name: "location_details",
            services:add_services 
        },
        {
            type: 'section',
            width: "partial",
            heading: "Parking & Transportation",
            name: "location_details",
            sub_sections: [
                {
                    type: 'sub_section',
                    content: parking_transportation
                },
            ]
        },
    ]
} %}

{% set aside_content = {
    title: "",
    entries: [
        {
            type: 'section',
            location: {
                address: "400 County Center, Redwood City, CA 94063",
                phone: {
                  text: "(510) 690-2700",
                  url: "tel:510-690-2700",
                },
                map: {
                  html: content.field_geolocation.0
                },
                directions_text: "Get Directions"
            }
        }
    ]
} %}

  {% include '@molecules/location-details/location-details.twig' with {
    location_details: {
      main: main_content ,
      aside: aside_content,
      }
  } %}

 {% include "@molecules/location/location.twig" with {
  location: {
    container: 'container',
    additional: content.body,
    classes: []
  }
} %} 
