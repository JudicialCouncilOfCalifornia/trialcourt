{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
{% set classes = [
  'node',
  node.isPromoted() ? 'node--promoted',
  node.isSticky() ? 'node--sticky',
  not node.isPublished() ? 'node--unpublished',
  node.bundle|clean_class,
  node.bundle|clean_class ~ '--' ~ view_mode|clean_class,
]|merge(classes|default([])) %}

{{ attach_library('classy/node') }}

<article{{ attributes.addClass(classes)|without('role') }} aria-label="News content">
  {{ title_prefix }}
  {{ title_suffix }}

  {% block content %}
    {% if label and not page %}
      {% set title %}
        <a href="{{ url }}" rel="bookmark">{{ label }}</a>
      {% endset %}
    {% elseif label and page %}
      {% set title %}
        {{ label }}
      {% endset %}
    {% endif %}

    {% set news_type %}
      {% if content.field_news_type[0] %}
        {{ content.field_news_type.0 }}
      {% else %}
        News
      {% endif %}
    {% endset %}

    {% set attachments = content.field_attachments[0] %}
    {% set images = content.field_images %}

    {# If body is empty set url attachement as button in the body area#}
    {% if (content.body.0 == null) and (content.field_attachments[0]) %}
      {# Display first document as primary download #}
      {% set primary_doc = content.field_attachments[0]['#url'] %}
      {% set body %}
        <div>
          {% include "@atoms/buttons/link-button.twig" with {
              link_button: {
                text: 'Download News',
                url: primary_doc
              }
            } only
          %}
        </div>
        {# Display other documents as secondary downloads #}
        {% set other_docs = [] %}
        {% for other_doc in content.field_attachments %}
          {% if other_doc['#title'] %}
            {% set doc_title = other_doc['#title'] %}
            {% set doc_url = other_doc['#url'] %}
            {% set other_docs = other_docs|merge([{
              url_title: doc_title,
              url: doc_url
            }]) %}
          {% endif %}
        {% endfor %}
        {% set other_docs = other_docs|slice(1) %} {# Skip the primary document #}
        {% if other_docs|length > 0 %}
          {% include '@molecules/blocks/link-list-simple/link-list-simple.twig' with {
            link_list: {
              list_icons: true,
              header: 'Other Downloads',
              items: other_docs,
            }
          } %}
        {% endif %}
      {% endset %}
    {% else %}
      {% set news_lead %}
        {% if content.body['#object'].body.summary %}
          <div class="summary">
            {{ content.body['#object'].body.summary }}
          </div>
        {% endif %}

        {% if content.field_contact[0] %}
          <div class="contacts">By
          {% set comma = "," %}
          {% for i in range(1, content.field_contact['#items']|length) %}
            {% set contact_name = content.field_contact[loop.index0]['#options'].entity.title.value %}
            {% set contact_email = content.field_contact[loop.index0]['#options'].entity.field_email.value %}
            {% if contact_email %}
              <a href="mailto:{{ contact_email }}">{{- contact_name -}}</a>{% if loop.revindex0 > 0 %}{{- comma }} {% endif %}
            {% else %}
              {{- contact_name -}}{% if loop.revindex0 > 0 %}{{- comma }} {% endif %}
            {% endif %}
          {% endfor %}
          </div>
        {% endif %}

        <div class="publish_date">
          {{ node.created.value|date(format="M j, Y") }}
        </div>

        {% if share_buttons_available %}
        <div class="jcc-social-share">
          {{ drupal_block("social_sharing_buttons_block") }}
        </div>
        {% endif %}
      {% endset %}

      {% set body %}
        {{ content.body.0 }}
      {% endset %}
    {%  endif %}

    {# BEGIN Set hero image for Feature typed news #}
    {% set hero_background = null %}
    {% set hero_parallax = null %}
    {% set hero_backgroud_img = null %}
    {% if node.type.entity.label|default == 'News' and content.field_news_type[0]['#title'] == 'Feature' %}
      {% set hero_background = 'has-background-image' %}
      {% set hero_parallax = true %}
      {% set hero_backgroud_img = hero_image %}
    {% endif %}
    {# END #}
    {% include '@jcc_base/_includes/section-hero.html.twig' with {
      background_variant: hero_background,
      background_parallax: hero_parallax,
      img: hero_backgroud_img,
      brow: news_type,
      title: title,
      lead: news_lead,
      body: null,
      breadcrumbs: 'disabled'
    } %}

    {% include '@jcc_newsroom/_includes/section-body.html.twig'with {
      no_title_decoration: true,
      related: null,
      attachments: null,
      related_links: null,
      subject_matter: null,
      tags: null,
      topics: null,
      images: null
    } %}

    {% if content.field_related_content[0] %}
      {% include '@jcc_base/_includes/relatedcontent.html.twig'with {
        related_content: {
          items: content.field_related_content,
        }
      } %}
    {% endif %}

    {% set related_links = content.field_links[0] %}
    {% set subject_matter = content.field_subject_matter[0] %}
    {% set tags = content.field_tags[0] %}
    {% set topics = content.field_topics[0] %}

    {% include '@jcc_base/_includes/section-secondary.html.twig'with {
      no_title_decoration: true
    } %}
  {% endblock %}
</article>
