{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
{% set classes = [
  'node',
  node.isPromoted() ? 'node--promoted',
  node.isSticky() ? 'node--sticky',
  not node.isPublished() ? 'node--unpublished',
  node.bundle|clean_class,
  node.bundle|clean_class ~ '--' ~ view_mode|clean_class,
]|merge(classes|default([])) %}

{{ attach_library('classy/node') }}

<article{{ attributes.addClass(classes)|without('role') }} aria-label="Multimedia album content">
  {{ title_prefix }}
  {{ title_suffix }}

  {% block content %}
    {% if label and not page %}
      {% set title %}
        <a href="{{ url }}" rel="bookmark">{{ label }}</a>
      {% endset %}
    {% endif %}

    {% if content.field_multimedia_type[0] %}
      {% set multimedia_type = content.field_multimedia_type.0 %}
    {% endif %}

    {% if content.body['#object'].body.summary or content.body %}
      {% set summary = content.body['#object'].body.summary %}
      {% set body %}
        <div class="body">
          {% if summary %}
            {{ summary }}
          {% else %}
            {{ content.body.0 }}
          {% endif %}
        </div>
      {% endset %}
    {% endif %}

    {% include '@jcc_base/_includes/section-hero.html.twig' with {
      brow: multimedia_type,
      title: label,
      body: body,
    } %}

    {% if content.field_videos[0] or content.field_images[0] %}
      <div class="grid-container padding-0 lightbox">
        {% if content.field_videos[0] %}
          <div class="grid-row lightbox__header">
            <h2>Videos</h2>
          </div>
          <div class="grid-row flex-row">
            {# field/field--field-videos.html.twig #}
            {{ content.field_videos }}
          </div>
        {% endif %}

        {% if content.field_images[0] %}
          <div class="grid-row lightbox__header">
            <h2>Images</h2>
            <p aria-hidden="true">Click on an image below to view in full size</p>
          </div>
          <div class="grid-row flex-row">
            {% for image in content.field_images['#items'] %}
              {% if image.entity and image.entity.mid.value != null %}
                {% set media_id = image.entity.mid.value %} {# not the file id #}
                {% set image_url = file_url(image.entity.field_media_image.entity.uri.value) %}
                {% set image_title = image.entity.name.value %}
                {% set image_alt = image.entity.field_media_image.alt %}
                {% set media_title = image_title %}
                {% set media_caption = '' %}
                {% if image.entity.field_media_caption.value %}
                  {% set media_caption = image.entity.field_media_caption.value|striptags %}
                {% endif %}

                {% set media_image %}
                  <div class="contextual-region">
                    {{ contextual_links('media:media=' ~ media_id) }}
                    <a aria-hidden="true" href="{{ image_url }}" class="colorbox cboxElement" data-colorbox-gallery="gallery-beforeafter" title="{{ media_caption }}">
                      <img src="{{ image_url }}" alt="{{ image_alt }}">
                    </a>
                  </div>
                  <img class="usa-sr-only" src="{{ image_url }}" alt="{{ image_alt }}">
                {% endset %}
              {% endif %}
              <div class="grid-col-12 tablet:grid-col-3 height-full lightbox__card image">
                {% include '@molecules/blocks/card/card.twig' with {
                  card: {
                    title: media_title,
                    excerpt_img: media_image,
                    excerpt: media_caption,
                  }
                } %}
              </div>
            {% endfor %}
          </div>
        {% endif %}
      </div>
    {% endif %}

    {% set related_links = content.field_links[0] %}
    {% set subject_matter = content.field_subject_matter[0] %}
    {% set tags = content.field_tags[0] %}
    {% set topics = content.field_topics[0] %}

    {% include '@jcc_base/_includes/section-secondary.html.twig' %}
  {% endblock %}
</article>
