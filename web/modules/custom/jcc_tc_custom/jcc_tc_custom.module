<?php

/**
 * @file
 * Contains jcc_tc_custom.module.
 */

use Drupal\search_api\Query\QueryInterface;
use Solarium\QueryType\Select\Query\Query;
use Drupal\Core\Database\Database;
use Drupal\user\Entity\User;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Utility\Xss;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function jcc_tc_custom_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Set default publish_state if it exists and is not set.
  if (!empty($form['publish_state'])) {
    $options = $form['publish_state']['widget'][0]['#options'];
    if (array_key_exists('published', $options)) {
      $default_value = $form['publish_state']['widget'][0]['#default_value'];
      $form['publish_state']['widget'][0]['#default_value'] = empty($default_value) ? ['published'] : $default_value;
    }
  }
  // Set default unpublish_state if it exists and is not set.
  if (!empty($form['unpublish_state'])) {
    $options = $form['unpublish_state']['widget'][0]['#options'];
    if (array_key_exists('archived', $options)) {
      $default_value = $form['unpublish_state']['widget'][0]['#default_value'];
      $form['unpublish_state']['widget'][0]['#default_value'] = empty($default_value) ? ['archived'] : $default_value;
    }
  }
}

/**
 * Implements hook_views_post_render().
 */
function jcc_tc_custom_views_post_render($view, &$output, $cache) {
  if ($view->id() == 'feed_embed' && $view->current_display == 'json_feed_1') {
    $index = \Drupal::request()->query->get('index');
    $output['#markup'] = "jsonCallback(" . $output['#markup'] . ", " . Xss::filter($index) . ")";
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */

/**
 * Cleaning menu item admin page for editors.
 */
function jcc_tc_custom_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#form_id'] == 'menu_link_content_main_form') {
    $current_user = User::load(\Drupal::currentUser()->id());
    // Menu items to protect.
    $protected_menu_items = ['1', '11', '24', '25', '26', '93'];

    // Disabling menu edits for specific items.
    if (!$current_user->hasRole('administrator')) {
      $menu_item_id = $form_state->getBuildInfo()['callback_object']->getEntity()->get('id')->getValue()[0]['value'];
      if (in_array($menu_item_id, $protected_menu_items)) {
        $form['link']['#disabled'] = TRUE;
        $form['weight']['#disabled'] = TRUE;
        $form['menu_parent']['#disabled'] = TRUE;
        $form['enabled']['#disabled'] = TRUE;
        $form['expanded']['#disabled'] = TRUE;
        $form['actions']['delete']['#access'] = FALSE;
      }
    }

    $properties_group = 'group_menu_item_properties';
    $details_group = 'group_details_sidebar';

    main_menu_cleaning_helper($form, 'menu_parent', $properties_group);
    main_menu_cleaning_helper($form, 'weight', $details_group);
    main_menu_cleaning_helper($form, 'expanded', $details_group);
    main_menu_cleaning_helper($form, 'enabled', $details_group);
    main_menu_cleaning_helper($form, 'description', $details_group);

    $form['link']['widget'][0]['options']['attributes']['#open'] = 0;
    // Protecting menu options from selected nodes.
  }
  elseif ($form['#form_id'] == 'node_landing_page_edit_form') {
    $current_user = User::load(\Drupal::currentUser()->id());
    // Menu items to protect.
    $protected_menu_nodes = ['651', '650', '834', '27', '928', '835', '836'];

    // Disabling menu edits for specific nodes.
    if (!$current_user->hasRole('administrator')) {
      $node_id = $form_state->getBuildInfo()['callback_object']->getEntity()->get('nid')->getValue()[0]['value'];
      if (in_array($node_id, $protected_menu_nodes)) {
        $form['actions']['delete']['#access'] = FALSE;
        array_push($form['#attributes']['class'], 'menu-settings-hidden');
        array_push($form['#attached']['library'], 'jcc_tc_custom/jcc_tc_custom');
      }
    }
  }
  elseif (strpos($form['#action'], 'admin/content/news-link/edit') != FALSE && strpos($form['#action'], 'wrapper_format=drupal_modal') != FALSE) {
    $form['#action'] = strtok($form['#action'], '?');
  }
  if ($form['#form_id'] == 'menu_link_content_main_form') {
    $form['group_details_sidebar']['expanded']['widget']['value']['#default_value'] = TRUE;
  }
}

/**
 * Helper function.
 */
function main_menu_cleaning_helper(&$form, $field, $group) {
  if (!empty($form[$field])) {
    $form[$field]['#group'] = $group;
    $form['#group_children'][$field] = $group;
    array_push($form['#fieldgroups'][$group]->children, $field);
    $form[$group][$field] = $form[$field];
    unset($form[$field]);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */

/**
 * Alters views exposed widget for various views (remove empty taxonomy filters)
 */
function jcc_tc_custom_form_views_exposed_form_alter(&$form, FormStateInterface $form_state) {
  if (array_key_exists('field_location_type_target_id', $form)) {
    jcc_tc_custom_cleanup_empty_filters($form, 'field_location_type_target_id', 'node__field_location_type');
  }
  elseif (array_key_exists('field_event_type_target_id', $form)) {
    jcc_tc_custom_cleanup_empty_filters($form, 'field_event_type_target_id', 'node__field_event_type');
  }
  elseif (array_key_exists('field_news_type_target_id', $form)) {
    jcc_tc_custom_cleanup_empty_filters($form, 'field_news_type_target_id', 'node__field_news_type');
  }
}

/**
 * Helper function for jcc_tc_custom_form_views_exposed_form_alter()
 */
function jcc_tc_custom_cleanup_empty_filters(&$form, $form_name, $field_name) {
  $options = $form[$form_name]['#options'];

  // Filterable Block options are structured differently.
  // Flatten them before altering.
  if (isset($options[0]->option)) {
    unset($options['All']);
    $flattened_options = [];
    foreach ($options as $opt) {
      $flattened_options += $opt->option;
    }
    $options = $flattened_options;
  }

  $connection = Database::getConnection();
  $sth = $connection->select($field_name, 'tags');
  $sth->addField('tags', $form_name);
  $sth->groupBy('tags.' . $form_name);

  $data = $sth->execute();
  $results = array_flip($data->fetchAll(\PDO::FETCH_COLUMN));
  $options = array_intersect_key($options, $results);
  $form[$form_name]['#options'] = $options;
}

/**
 * Implements hook_search_api_solr_query_alter().
 */
function jcc_tc_custom_search_api_solr_query_alter(Query $solarium_query, QueryInterface $query) {
  $index = $query->getIndex();

  $fields = $index->getServerInstance()
    ->getBackend()
    ->getSolrFieldNames($index);
  $solrField = !empty($fields['created']) ? $fields['created'] : '';

  if ($solrField != '') {
    $solarium_query->addParam(
      'boost',
      'recip(abs(ms(NOW/HOUR,' . $solrField . ')),4.16e-11,4,.4)^10'
    );
    $solarium_query->addParam(
      'bf',
      'recip(abs(ms(NOW/HOUR,' . $solrField . ')),4.16e-11,4,.4)^10'
    );
  }
}

/**
 * Implements hook_entity_access().
 */
function jcc_tc_custom_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if ($entity->id() == 'relatednews') {
    $current_user = \Drupal::currentUser();
    $roles = $current_user->getRoles();
    if (in_array('editor', $roles)) {
      return AccessResult::allowed();
    }
  }
  return AccessResult::neutral();
}
