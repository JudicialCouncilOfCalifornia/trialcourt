<?php

/**
 * @file
 * The jcc_elevated_sections module file.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\jcc_elevated_sections\Entity\JccSection;
use Drupal\node\NodeInterface;
use Drupal\pathauto\PathautoPatternInterface;

// Include all files from the inc directory.
$includes_path = dirname(__FILE__) . '/inc/*.inc';
foreach (glob($includes_path) as $filename) {
  require_once dirname(__FILE__) . '/inc/' . basename($filename);
}

/**
 * Implements hook_entity_bundle_info_alter().
 */
function jcc_elevated_sections_entity_bundle_info_alter(array &$bundles): void {
  $section_service = Drupal::service('jcc_elevated_sections.service');
  $vocab_source = $section_service->getSectionSourceId();

  // Extend the Term entity for terms that have Site Section functionality.
  if ($vocab_source && isset($bundles['taxonomy_term'][$vocab_source])) {
    $bundles['taxonomy_term'][$vocab_source]['class'] = JccSection::class;
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function jcc_elevated_sections_entity_base_field_info(EntityTypeInterface $entity_type): array {
  // Set some variables.
  $section_service = Drupal::service('jcc_elevated_sections.service');
  $vocab_source = $section_service->getSectionSourceId();

  $fields = [];

  // Set fields for Taxonomy terms entity.
  if ($entity_type->id() === 'taxonomy_term') {

    $fields['jcc_section_url_prefix'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Section URL prefix'))
      ->setDescription(t('The URL prefix to apply to all content in this section. Start with "/" ("/example/path"). Try not to change once set.'))
      ->setRequired(TRUE)
      ->setSetting('max_length', 255)
      ->setDisplayConfigurable('form', FALSE)
      ->setDisplayConfigurable('view', FALSE)
      ->setDisplayOptions('form', [
        'weight' => 10,
      ]);

    $fields['jcc_section_homepage'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(t('Section homepage'))
      ->setDescription(t('Set the page that will act as the starting point for this section.'))
      ->setRequired(TRUE)
      ->setSetting('target_type', 'node')
      ->setSetting('handler_settings', [
        'target_bundles' => [
          'landing_page' => 'landing_page',
          'subpage' => 'subpage',
        ],
      ])
      ->setCardinality(1)
      ->setDisplayConfigurable('form', FALSE)
      ->setDisplayConfigurable('view', FALSE)
      ->setDisplayOptions('form', [
        'weight' => 11,
      ]);

    $fields['jcc_section_machine_name'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Section machine name'))
      ->setDescription(t('The machine_name for this section. This value is for Dev/Backend use. Try not to change once set.'))
      ->setRequired(FALSE)
      ->setSetting('max_length', 255)
      ->setDisplayConfigurable('form', FALSE)
      ->setDisplayConfigurable('view', FALSE)
      ->setDisplayOptions('form', [
        'weight' => 12,
      ]);
  }

  // Set fields for User entity.
  if ($entity_type->id() === 'user') {
    $fields['jcc_sections'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(t('Allowed sections'))
      ->setDescription(t('Set the sections that this user is only allowed to edit.'))
      ->setSetting('target_type', 'taxonomy_term')
      ->setSetting('handler', 'default:taxonomy_term')
      ->setSetting('handler_settings', [
        'target_bundles' => [$vocab_source => $vocab_source],
        'sort' => ['field' => 'name'],
        'auto_create' => FALSE,
        'auto_create_bundle' => '',
      ])
      ->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)
      ->setDisplayConfigurable('view', FALSE)
      ->setDisplayConfigurable('form', FALSE)
      ->setDisplayOptions('form', [
        'type' => 'options_buttons',
        'weight' => 3,
        'settings' => [],
      ]);

    $fields['jcc_restrict'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Restrict general content editing'))
      ->setDescription(t('Unchecked, user may still edit non-sectioned content. Checked, user will only have edit access to the content in their assigned section(s).'))
      ->setDisplayConfigurable('form', FALSE)
      ->setDisplayConfigurable('view', FALSE)
      ->setDisplayOptions('form', ['weight' => 11]);
  }

  // Set fields for Node entity.
  if ($entity_type->id() === 'node') {
    $fields['jcc_section'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(t('Section'))
      ->setDescription(t('Set this page into a section. Leave unassigned to designate as general content.'))
      ->setRequired(FALSE)
      ->setSetting('target_type', 'taxonomy_term')
      ->setSetting('handler', 'default:taxonomy_term')
      ->setSetting('handler_settings', [
        'target_bundles' => [$vocab_source => $vocab_source],
        'sort' => ['field' => 'name'],
        'auto_create' => FALSE,
        'auto_create_bundle' => '',
      ])
      ->setCardinality(1)
      ->setDisplayConfigurable('view', FALSE)
      ->setDisplayConfigurable('form', FALSE)
      ->setDisplayOptions('form', [
        'type' => 'options_select',
        'weight' => 3,
        'settings' => [],
      ]);
  }

  // Set fields for Media entity.
  if ($entity_type->id() === 'media') {
    $fields['jcc_section'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(t('Section'))
      ->setDescription(t('Set this media item into a section. Leave unassigned to designate as general content.'))
      ->setRequired(FALSE)
      ->setSetting('target_type', 'taxonomy_term')
      ->setSetting('handler', 'default:taxonomy_term')
      ->setSetting('handler_settings', [
        'target_bundles' => [$vocab_source => $vocab_source],
        'sort' => ['field' => 'name'],
        'auto_create' => FALSE,
        'auto_create_bundle' => '',
      ])
      ->setCardinality(1)
      ->setDisplayConfigurable('view', FALSE)
      ->setDisplayConfigurable('form', FALSE)
      ->setDisplayOptions('form', [
        'type' => 'options_select',
        'weight' => 3,
        'settings' => [],
      ]);
  }

  return $fields;
}

/**
 * Implements hook_pathauto_alias_alter().
 */
function jcc_elevated_sections_pathauto_alias_alter(&$alias, array &$context) {
  // Set some variables.
  $section_service = Drupal::service('jcc_elevated_sections.service');

  // If a node and a sectionable node type, apply the prefix.
  if ($context['module'] == 'node' && $node = $context['data']['node']) {

    if ($section_service->isEntitySectionable($node) && $node->hasField('jcc_section')) {
      $section_id = $node->get('jcc_section')->target_id;
      $bundle = $node->bundle();

      if ($section_id && is_numeric($section_id)) {

        $allowed_prefix_types = $section_service->getSectionableUrlPrefixTypes();
        if ($allowed_prefix_types[$bundle] != FALSE) {
          // Get Section from the ID (Term ID) on the node, then get prefix.
          $section = JccSection::load($section_id);
          $prefix = trim($section->getSectionUrlPrefix());
          // Update the alias to include the prefix.
          $alias = !empty($prefix) ? $prefix . $alias : $alias;
        }
      }
    }
  }

  // If a media item and a sectionable media type, apply the prefix.
  if ($context['module'] == 'media' && $media = $context['data']['media']) {

    if ($section_service->isEntitySectionable($media) && $media->hasField('jcc_section')) {
      $section_id = $media->get('jcc_section')->target_id;

      if ($section_id && is_numeric($section_id)) {

        // Get Section from the ID (Term ID) on the node, then get prefix.
        $section = JccSection::load($section_id);
        $prefix = trim($section->getSectionUrlPrefix());

        // Update the alias to include the prefix.
        $alias = !empty($prefix) ? $prefix . $alias : $alias;
      }
    }
  }
}

/**
 * Implements hook_entity_access().
 */
function jcc_elevated_sections_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  $section_service = Drupal::service('jcc_elevated_sections.service');
  $vid = $section_service->getSectionSourceId();

  // We want to limit the edit and delete access for sectioned content to only
  // those who have full admin over sections or to those who are assigned to
  // the section on the entity.
  if ($operation == 'update' || $operation == 'edit' || $operation == 'delete' || $operation == 'translate') {
    if ($section_service->isEntitySectionable($entity)) {
      $user = \Drupal::entityTypeManager()->getStorage('user')->load($account->id());

      // See if user has restricted general editing.
      $user_is_restricted = $section_service->userIsRestrictedFromGeneralContent($user);

      // Check if entity has a section applied.
      $entity_has_section = (bool) $section_service->getSectionForEntity($entity);

      // If entity does not have a section, check if user is not allowed to
      // edit non-sectioned general content.
      if (!$entity_has_section && $user_is_restricted) {
        return AccessResult::forbidden();
      }

      // If entity has a section, check if user can access that section by
      // comparing the entity section to the applied sections of the user.
      if ($entity_has_section) {
        if ($section_service->userCanAccessSection($user, $section_service->getSectionForEntity($entity))) {
          return AccessResult::allowed();
        }
        else {
          return AccessResult::forbidden();
        }
      }
    }
  }

  // When deleting the section taxonomy, prevent deletion if there is content
  // associated with the section. Better to edit the term with a new name, or
  // edit the content that is associated with it.
  if ($operation == 'delete') {
    if ($entity->getEntityTypeId() == 'taxonomy_term') {
      if ($entity->bundle() == $vid) {

        // See if any content is associated with our section.
        $content_ids_associated_with_the_section_term = _jcc_elevated_sections_get_all_entities_connected_to_section($entity->id());

        if ($content_ids_associated_with_the_section_term) {
          return AccessResult::forbidden();
        }
      }

    }
  }

  // When viewing the JCC Section taxonomy terms, Only allow users that are set
  // to access those sections.
  if ($operation == 'view') {
    if ($entity->getEntityTypeId() == 'taxonomy_term') {
      if ($entity->bundle() == $vid) {
        $user = \Drupal::entityTypeManager()->getStorage('user')->load($account->id());
        $sid = $entity->id();
        if ($section_service->userCanAccessSection($user, $sid)) {
          return AccessResult::allowed();
        }
        else {
          return AccessResult::forbidden();
        }
      }
    }
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_entity_operation_alter().
 */
function jcc_elevated_sections_entity_operation_alter(array &$operations, EntityInterface $entity) {
  // Set some variables.
  $section_service = Drupal::service('jcc_elevated_sections.service');

  if ($section_service->isEntitySectionable($entity)) {
    $current_account = \Drupal::currentUser();
    $user = \Drupal::entityTypeManager()->getStorage('user')->load($current_account->id());

    if (!$section_service->userCanEditSectionsOnEntity($user, $entity)) {
      unset($operations['translate']);
    }
  }

}

/**
 * Helper function to build a storybook compatible menu tree.
 */
function jcc_elevated_sections_build_menu_tree(array $tree, $add_home = FALSE, $section = FALSE, $overview_link = FALSE): array {
  $items = [];

  $current_relative_url = \Drupal::request()->getRequestUri();

  // Set up the Home link.
  if ($add_home) {
    $home = $add_home;
    $home_url = $home->toUrl();

    // For the section Home link, determine if it is the currently active page.
    $active = FALSE;
    $current_node = \Drupal::routeMatch()->getParameter('node');
    if ($current_node instanceof NodeInterface) {
      $active = $current_node->id() == $home->id();
    }

    $items[] = [
      'text' => t('Home'),
      'url' => $home_url->setOption('set_active_class', $active),
      'attributes' => [],
      'active' => $active,
      'links' => [],
    ];
  }

  // Set up the existing menu links.
  foreach ($tree as $menu_data) {
    if (!empty($menu_data['url'])) {

      $active = $menu_data['url']->getOption('set_active_class');
      $menu_item_relative_url = $menu_data['url']->toString();

      $section_link = [];
      $sublinks = $menu_data['below'] ? jcc_elevated_sections_build_menu_tree($menu_data['below']) : [];

      if (str_contains($current_relative_url, $menu_item_relative_url) && ($current_relative_url != $menu_item_relative_url)) {
        $attributes = (array) $menu_data['url']->getOption('attributes');
        $attributes['class'][] = 'in-active-trail';
        $menu_data['url']->setOption('attributes', $attributes);
        $active = TRUE;
      }

      // Add overview link to sublinks array. Needed for mobile links.
      if ($overview_link && !empty($sublinks)) {
        $section_link = [
          'text' => $menu_data['title'],
          'url' => $menu_data['url']->setOption('set_active_class', $active),
          'attributes' => !empty($menu_data['attributes']->toArray()) ? $menu_data['attributes']->toArray() : [],
          'active' => $active,
          'is_overview_link' => TRUE,
          'links' => [],
        ];
        array_unshift($sublinks, $section_link);
      }

      $items[] = [
        'text' => $menu_data['title'],
        'url' => $menu_data['url'],
        'attributes' => !empty($menu_data['attributes']->toArray()) ? $menu_data['attributes']->toArray() : [],
        'active' => $active,
        'links' => $sublinks,
        'section_link' => $section_link,
      ];

    }
  }

  return $items;
}

/**
 * Helper function to return the Section of the current page (node).
 */
function jcc_get_current_page_section() {
  $route_match = \Drupal::routeMatch();
  $route = $route_match->getRouteObject();
  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute($route);

  if (!$is_admin && $node = $route_match->getParameter('node')) {
    if ($node instanceof NodeInterface) {
      $section_service = Drupal::service('jcc_elevated_sections.service');
      $node_manager = \Drupal::entityTypeManager()->getStorage('node');
      $node = $node_manager->load($node->id());

      if ($section_service->isNodeSectionable($node->bundle())) {
        $sid = $section_service->getSectionForNode($node);
        return is_numeric($sid) ? $sid : FALSE;
      }
    }
  }

  return FALSE;
}

/**
 * Helper function to see if any content is tagged with a section.
 */
function _jcc_elevated_sections_get_all_entities_connected_to_section($sid): array {
  // Finds all node ids, media item ids, and user ids tagged with a
  // section term.
  //
  // Get the node ids of content associated with the section term.
  $nids = \Drupal::database()->select('node_field_data', 'n')
    ->fields('n', ['nid'])
    ->condition('jcc_section', $sid)
    ->execute()->fetchCol();

  // Get the media ids of media associated with the section term.
  $mids = \Drupal::database()->select('media_field_data', 'm')
    ->fields('m', ['mid'])
    ->condition('jcc_section', $sid)
    ->execute()->fetchCol();

  // Get the ids of users associated with the section term.
  $uids = \Drupal::database()->select('user__jcc_sections', 'u')
    ->fields('u', ['entity_id'])
    ->condition('jcc_sections_target_id', $sid)
    ->execute()->fetchCol();

  return array_merge($nids, $mids, $uids);
}

/**
 * Implements hook_pathauto_pattern_alter().
 */
function jcc_elevated_sections_pathauto_pattern_alter(PathautoPatternInterface $pattern, array $context) {
  $section_service = Drupal::service('jcc_elevated_sections.service');

  if ($context['module'] == 'node' && $section_service->isNodeSectionable($context['bundle'])) {
    $node = $context['data']['node'];

    if ($sid = $section_service->getSectionForNode($node)) {
      $section = $section_service->getSectionInfo($sid);

      $allowed_prefix_types = $section_service->getSectionableUrlPrefixTypes();
      // If we have a sectioned page AND it is NOT a type that has the prefix
      // managed via jcc_elevated_sections_pathauto_alias_alter(), then we need
      // to still apply a different default pattern. The default is to use the
      // menu label to build the URL. We need to change the default behavior to
      // use the parent URL. Content that is defined as using the prefix, have
      // the prefix applied to the generated URL. In this case, we need to alter
      // the pattern used to generate the URL itself.
      if ($section && !$allowed_prefix_types[$context['bundle']]) {
        // Change the pattern on section pages to use url of the menu parent
        // page. Previous pattern uses the menu label as source, which does not
        // set the desired URL pattern.
        $new_pattern = "[node:menu-link:parent:url:path]/[node:title]";
        $pattern->setPattern($new_pattern);

        // Set the section homepage to match the Url prefix pattern. Directly
        // applying the value doesn't seem to work. We have to apply it
        // piecemeal for it to trigger.
        $section_home_id = $section->get('jcc_section_homepage')->target_id;
        if ($section_home_id == $node->id()) {
          if ($section_url_prefix = $section->get('jcc_section_url_prefix')->value) {
            // We grab the last element if the prefix. We assume that the parent
            // url path matches the previous elements of the prefix URL.
            $prefix = explode('/', $section_url_prefix);
            $pattern->setPattern("[node:menu-link:parent:url:path]/" . end($prefix));
          }
        }
      }
    }
  }
}
