<?php

/**
 * @file
 * Contains jcc_blocks.module.
 */

use SendGrid\Exception;
use SendGrid\Email;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Entity\EntityInterface;
use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;

use JudicialCouncil\Emma\JccClient;
use SendGrid\Client as SClient;

/**
 * Implements hook_form_alter().
 */
function jcc_subscriptions_form_alter(&$form, &$form_state, $form_id) {

  if (in_array($form['#form_id'],
    [
      'node_news_form',
      'node_news_edit_form',
      'user_form',
    ]
  )) {
    // Connection to myEmma.
    $emma_config = \Drupal::config('webform_myemma.settings');
    if (!$emma_config->get('account_id')) {
      return FALSE;
    }

    $emma = new JccClient($emma_config->get('account_id'), $emma_config->get('public_key'), $emma_config->get('private_key'));

    // Getting groups from myemma / only keeping ones with naming convention.
    $myemma_groups = $emma->list_groups();
    $form_groups = [];
    foreach ($myemma_groups as $group) {
      if (strpos($group->group_name, 'Newsroom mailing') !== FALSE) {
        if (!(strpos($group->group_name, 'internal-only') !== FALSE && $form['#form_id'] == 'user_form')) {
          $form_groups[$group->member_group_id] = str_ireplace(
            [
              'internal-only ',
              'Newsroom mailing ',
            ],
            [
              '',
              '',
            ],
            $group->group_name);
        }
      }
    }

    $form['group_social']['subscriptions_fieldset'] = [
      '#type' => 'fieldset',
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
      '#weight' => 100,
    ];

    // Creating list of groups form myEmma.
    $form['group_social']['subscriptions_fieldset']['myemma_groups'] = [
      '#type' => 'checkboxes',
      '#options' => $form_groups,
      '#title' => t('Category subscriptions:'),
      '#group' => 'group_social',
      '#weight' => 100,
    ];

    // Extra formatting if creating a news item.
    if (in_array($form['#form_id'], ['node_news_form', 'node_news_edit_form'])) {
      // Adding invisible markup to empty fieldgroup.
      $form['field_invisible'] = [
        '#type' => 'markup',
        '#markup' => '',
        '#group' => 'group_social',
      ];

      $form['group_social']['subscriptions_fieldset']['field_send_email'] = [
        '#type' => 'checkbox',
        '#title' => t('Send an email when saving this news item.'),
        '#default_value' => FALSE,
        '#weight' => 50,
      ];

      // Moving the list to the social fieldgroup.
      $form['#group_children']['subscriptions_fieldset'] = 'group_social';
      if (isset($form['#fieldgroups']['group_social'])) {
        $form['#fieldgroups']['group_social']->children[] = 'subscriptions_fieldset';
      }
      $form['group_social']['subscriptions_fieldset']['myemma_groups']['#states'] = [
        'visible' => [
          ':input[name="field_send_email"]' => ['checked' => TRUE],
        ],
      ];
    }

    if ($form['#form_id'] == 'user_form') {
      $user_req = $emma->get_member_detail_by_email($form['account']['mail']['#default_value']);
      if (!isset($user_req->error)) {
        // pre-populate active categories.
        $emma_user_id = $user_req->member_id;
        $user_groups_object = $emma->list_member_groups($emma_user_id);
        $user_groups = [];
        foreach ($user_groups_object as $group_objects) {
          array_push($user_groups, $group_objects->member_group_id);
        }
        $form['group_social']['subscriptions_fieldset']['myemma_groups']['#default_value'] = $user_groups;
      }
    }

    // Custom actions on submit.
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'jcc_subscriptions_form_submit';
      }
    }
  }
  elseif ($form['#form_id'] == 'user_register_form') {
    $form['actions']['submit']['#value'] = t('Sign Up');
  }
}

/**
 * Alters for submission - sends query.
 */
function jcc_subscriptions_form_submit($form, FormStateInterface $form_state) {
  if (in_array($form['#form_id'], ['node_news_form', 'node_news_edit_form'])
    && $form_state->cleanValues()->getValues()['field_send_email'] == 1) {
    global $base_url;
    // Getting data from myemma.
    $emma_config = \Drupal::config('webform_myemma.settings');
    if (!$emma_config->get('account_id')) {
      return FALSE;
    }

    $emma = new JccClient($emma_config->get('account_id'), $emma_config->get('public_key'), $emma_config->get('private_key'));

    $groups = $form_state->cleanValues()->getValues()['myemma_groups'];
    $emma_groups = array_filter($groups, function ($item) {
      return $item !== 0;
    });

    $tempstore = \Drupal::service('tempstore.shared');
    $store = $tempstore->get('jcc_subscriptions');

    // Gathering emails to send emails to.
    $email_to_sendgrid = [];
    $id_to_sendgrid = [];
    $email_access_keys = [];
    $id_access_keys = [];
    $groups_string_list = '';

    foreach ($emma_groups as $emma_group) {
      $group_details = $emma->get_group_detail($emma_group);
      $groups_string_list = $groups_string_list . $emma_group->group_name . ' / ';
      if (isset($group_details->active_count)) {
        $users_ammount = $group_details->active_count;
        $loops = ceil($users_ammount / 500);

        for ($x = 0; $x < $loops; $x++) {
          $start = ($x * 500);
          $users_in_group = $emma->list_group_members($emma_group, 0, $start);
          foreach ($users_in_group as $user_group) {
            if (!in_array($user_group->email, $email_to_sendgrid, TRUE)) {
              array_push($email_to_sendgrid, $user_group->email);
              // Building array of ID's for opting out urls.
              array_push($id_to_sendgrid, $user_group->member_id);

              $email_key = user_password();
              array_push($email_access_keys, $email_key);
              $store->set('member_email_' . $user_group->email, $email_key);

              $id_key = user_password();
              array_push($id_access_keys, $id_key);
              $store->set('member_id_' . $user_group->member_id, $id_key);
            }
          }
        }
      }
    }

    // Building query for sendgrid.
    $news_title = $form_state->cleanValues()->getValues()['title'];
    $news_summary = $form_state->cleanValues()->getValues()['body'];
    $news_nid = $form_state->cleanValues()->getValues()['nid'];
    $news_post_date_unformated = $form_state->cleanValues()->getValues()['created'][0]['value'];
    // $news_image = $form_state->cleanValues()->getValues()['field_images'];
    // Date formatting.
    $date = new DrupalDateTime($news_post_date_unformated, DateTimeItemInterface::STORAGE_TIMEZONE);
    $news_post_date = $date->format('F j, Y');

    // Getting news item path alias.
    $news_internal_path = '/node/' . (int) $news_nid;
    $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
    $news_path_alias = $base_url . \Drupal::service('path_alias.manager')->getAliasByPath($news_internal_path, $langcode);

    // Getting from email.
    if (!empty(\Drupal::service('key.repository')->getKey('newsroom_sendgrid'))) {
      $sendgrid_conf = \Drupal::config('sendgrid_integration.settings')->get('test_defaults');
      $to = $sendgrid_conf['from_name'];
      $sendgrid_api_key = \Drupal::service('key.repository')->getKey('newsroom_sendgrid')->getKeyValue();

      $body = str_replace(
        [
          '%news_post_date%',
          '%news_url%',
          '%news_title%',
          '%news_summary%',
          '%base_url%',
        ],
        [
          $news_post_date,
          $news_path_alias,
          $news_title[0]['value'],
          $news_summary[0]['summary'] ?: strip_tags(substr($news_summary[0]['value'], 0, 300)),
          $base_url,
        ],
        '
          <div>%news_post_date%</div>
          <h2><a href="%news_url%">%news_title%</a></h2>
          <p>%news_summary%</p>
          <p><a href="%news_url%">Read more ></a></p>
          <br/>
          <p><a href="%base_url%/subscriptions/%member_email%/manage/%email_key%">manage your preferences</a><br>
          or <a href="%base_url%/subscriptions/%member_id%/delete-all/%id_key%">opt out</a> from all communications.</p>
        '
      );

      // DOC: https://github.com/Fastglass-LLC/sendgrid-php-example/blob/master/sendgrid-php-example-send.php
      // Creating email object.
      $sendgrid = new SClient($sendgrid_api_key, ["turn_off_ssl_verification" => TRUE]);
      $email = new Email();
      $email->setSmtpapiTos($email_to_sendgrid)
        ->setFrom($to)
        ->setFromName(\Drupal::config('system.site')->get('name'))
        ->setSubject($news_title[0]['value'])
        ->setText($news_title[0]['value'])
        ->setHtml($body)
        ->addSubstitution('%member_id%', $id_to_sendgrid)
        ->addSubstitution('%member_email%', $email_to_sendgrid)
        ->addSubstitution('%id_key%', $id_access_keys)
        ->addSubstitution('%email_key%', $email_access_keys)
        ->addHeader('X-Sent-Using', 'SendGrid-API')
        ->addHeader('X-Transport', 'web')
        ->setCategories(
          [
            'News Alert',
            'News Alert - ' . $news_title[0]['value'],
          ]
        );

      \Drupal::logger('sendgrid_message')->notice($news_title[0]['value'] . ' has been emailed to the following groups: ' . $groups_string_list . ' (' . count($email_to_sendgrid) . ' users total)');

      // Issue when simply calling $sendgrid->send($email);
      // fix from https://www.drupal.org/project/sendgrid_integration/issues/3041660#comment-13784755
      // Send an email using the template stored in SendGrid.
      try {
        $sendGridResponse = $sendgrid->send($email);

        if ($sendGridResponse->getCode() == 200 || $sendGridResponse->getCode() == "200") {
          \Drupal::messenger()->addMessage(t('Email successfully sent'));
        }
        else {
          // Show error.
          \Drupal::messenger()->addMessage(t('Email was not sent'));
        }
      }
      catch (Exception $e) {
        $eMessage = $e->getMessage();
        if (strpos($eMessage, 'success') !== FALSE) {
          \Drupal::logger('sendgrid_message')->notice('SendGrid: sent');
        }
      }
    }
  }
  elseif ($form['#form_id'] == 'user_form') {
    $emma_config = \Drupal::config('webform_myemma.settings');
    if (!$emma_config->get('account_id')) {
      return FALSE;
    }

    $emma = new JccClient($emma_config->get('account_id'), $emma_config->get('public_key'), $emma_config->get('private_key'));

    $user_req = $emma->get_member_detail_by_email($form_state->cleanValues()->getValues()['mail']);
    $user_emma_id = $user_req->member_id;
    // Create / Update user.
    $fields = [
      'first_name' => $form_state->cleanValues()->getValues()['name'],
    ];
    $groups = [];
    $groups_to_remove = [];
    foreach ($form_state->cleanValues()->getValues()['myemma_groups'] as $key => $val) {
      if ($val !== 0) {
        $groups[] = $val;
      }
      else {
        $groups_to_remove[] = $key;
      }
    }
    $emma->import_single_member($form_state->cleanValues()->getValues()['mail'], $fields, $groups);
    // Need an extra call to account for groups to remove.
    $emma->remove_member_from_groups($user_emma_id, $groups_to_remove);
  }
}

/**
 * Implements hook_entity_insert().
 */
function jcc_subscriptions_user_insert(EntityInterface $entity) {
  $tempstore = \Drupal::service('tempstore.shared');
  $store = $tempstore->get('jcc_subscriptions');
  $store->set('member_email_' . $entity->get('mail')->value, user_password());
}

/**
 * Implements hook_token_info().
 */
function jcc_subscriptions_token_info() {
  $type = [
    'name' => t('JCC Custom'),
    'description' => t('JCC Custom Tokens.'),
  ];
  $jcc['subscription-mail-access-key'] = [
    'name' => t("Subscription Mail Access Key"),
    'description' => t('Subscription Access Key for Mail'),
  ];

  return [
    'types' => ['jcc' => $type],
    'tokens' => ['jcc' => $jcc],
  ];
}

/**
 * Implements hook_tokens().
 */
function jcc_subscriptions_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];
  if ($type == 'jcc' && !empty($data['user'])) {
    /** @var \Drupal\user\UserInterface $account */
    $account = $data['user'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'subscription-mail-access-key':
          $tempstore = \Drupal::service('tempstore.shared');
          $store = $tempstore->get('jcc_subscriptions');
          $replacements[$original] = $store->get('member_email_' . $account->get('mail')->value);
          break;
      }
    }
  }
  return $replacements;
}

/**
 * Implements hook_cron().
 */
function jcc_subscriptions_cron() {
  $digest_cron_task = \Drupal::service('jcc_subscriptions.digestcron');
  $digest_cron_task->cron();
}
