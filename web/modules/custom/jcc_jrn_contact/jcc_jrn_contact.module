<?php

/**
 * @file
 * Provides a jcc staff entity type.
 */

use Drupal\Core\Render\Element;

/**
 * Implements hook_theme().
 */
function jcc_jrn_contact_theme() {
  return [
    'jcc_staff' => [
      'render element' => 'elements',
    ],
    'jcc_cio' => [
      'render element' => 'elements',
    ],
    'jcc_officer' => [
      'render element' => 'elements',
    ],
    'jcc_ajp' => [
      'render element' => 'elements',
    ],
    'jcc_court' => [
      'render element' => 'elements',
    ],
    'jcc_address' => [
      'render element' => 'elements',
    ],
    'custom_staff_view' => [
      'variables' => [
        'form' => NULL,
        'table' => NULL,
        'summary' => NULL,
      ],
      'template' => 'custom_staff_view',
    ],
    'custom_officer_view' => [
      'variables' => [
        'form' => NULL,
        'table' => NULL,
        'summary' => NULL,
      ],
      'template' => 'custom_officer_view',
    ],
    'custom_ajp_view' => [
      'variables' => [
        'form' => NULL,
        'table' => NULL,
        'summary' => NULL,
      ],
      'template' => 'custom_ajp_view',
    ],
  ];
}

/**
 * Prepares variables for jcc staff templates.
 *
 * Default template: jcc-staff.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the jcc staff information
 *     and any fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_jcc_staff(array &$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Prepares variables for jcc cio templates.
 *
 * Default template: jcc-cio.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the jcc cio information and
 *     any fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_jcc_cio(array &$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Prepares variables for jcc officer templates.
 *
 * Default template: jcc-officer.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the jcc officer information and
 *     any fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_jcc_officer(array &$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Prepares variables for jcc ajp templates.
 *
 * Default template: jcc-ajp.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the jcc ajp information and
 *     any fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_jcc_ajp(array &$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Prepares variables for jcc court templates.
 *
 * Default template: jcc-court.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the jcc court information and
 *     any fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_jcc_court(array &$variables) {
  $court_entity = \Drupal::routeMatch()->getParameter('jcc_court'); 
  $court_id = $court_entity instanceof \Drupal\Core\Entity\EntityInterface ? $court_entity->id() : NULL;
  //dpm($court_id);
   $name = $court_entity->label();
    $court_type = '';
    if (!$court_entity->get('court_type')->isEmpty()) {
      $court_type_entity = $court_entity->get('court_type')->entity;
      $court_type = $court_type_entity ? $court_type_entity->label() : '';
    }
    $variables['name_and_type'] = $name . ' - ' . $court_type;  
   //$target_tid = 35;
  if ($court_id) {  
    $query = \Drupal::entityTypeManager()->getStorage('jcc_cio')->getQuery();
    $query->condition('court', $court_id);
   // $query->condition('job_title', $target_tid);
    $query->accessCheck(TRUE);
    $ids = $query->execute();

 if (!empty($ids)) {
      $cios = \Drupal::entityTypeManager()->getStorage('jcc_cio')->loadMultiple($ids);      
      $cio_data = [];
      foreach ($cios as $cio) {
       if (!$cio->get('job_title')->isEmpty()) {
          $term = $cio->get('job_title')->entity;
          if ($term) {
            $job_title_term = $term->label();
          }
        }
        $cio_data[] = [
          'person_id' => $cio->get('person_id')->value,          
          'fname' => $cio->get('first_name')->value,          
          'lname' => $cio->get('last_name')->value,
          'email' => $cio->get('email')->value,
          'court' => $cio->get('court')->value,
          'job_class' =>   $job_title_term,
        ];
      }
      $variables['cio_data'] = $cio_data;
    }
  }

  
  //ADDRESS
 if ($court_id) { 
   $query = \Drupal::entityTypeManager()->getStorage('jcc_address')->getQuery();
    $query->condition('court', $court_id);
    $query->accessCheck(TRUE);
    $ids = $query->execute();

 if (!empty($ids)) {
      $addrs = \Drupal::entityTypeManager()->getStorage('jcc_address')->loadMultiple($ids);      
      $addr_data = [];
      foreach ($addrs as $address) {
        $addr_data[] = [
          'addr1' => $address->get('addr1')->value, 
          'addr2' => $address->get('addr2')->value,  
          'city' => $address->get('city')->value,      
          'state' => $address->get('state')->value,
          'zip' => $address->get('zip')->value,
          'mailing_addr1' => $address->get('mailing_addr1')->value, 
          'phone' => $address->get('phone')->value, 
          'fax' => $address->get('fax')->value, 
        ];
      }
      $variables['address_data'] = $addr_data;
    }
  }
foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  
  }
