<?php

/**
 * @file
 * Provides a jcc staff entity type.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Render\Element;

/**
 * Implements hook_theme().
 */
function jcc_jrn_contact_theme() {
  return [
    'jcc_staff' => [
      'render element' => 'elements',
    ],
    'jcc_cio' => [
      'render element' => 'elements',
    ],
    'jcc_officer' => [
      'render element' => 'elements',
    ],
    'jcc_ajp' => [
      'render element' => 'elements',
    ],
    'jcc_court' => [
      'render element' => 'elements',
    ],
    'jcc_address' => [
      'render element' => 'elements',
    ],
    'custom_staff_view' => [
      'variables' => [
        'exposed' => NULL,
        'table' => NULL,
        'summary' => NULL,
        'rows' => NULL,
        'headers' => NULL,
        'result_count' => 0,
      ],
      'template' => 'custom_staff_view',
    ],
    'custom_ajp_view' => [
      'variables' => [
        'form' => NULL,
        'table' => NULL,
        'summary' => NULL,
      ],
      'template' => 'custom_ajp_view',
    ],
  ];
}

/**
 * Prepares variables for displaying results_count.
 *
 * Default template: custom_staff_view.html.twig.
 */
function jcc_jrn_contact_preprocess_custom_staff_view(array &$variables) {
  $variables['search_term'] = \Drupal::request()->query->get('keyword') ?? '';
  if (!empty($variables['rows']) && is_array($variables['rows'])) {
    $variables['result_count'] = count($variables['rows']);
  }
  else {
    $variables['result_count'] = 0;
  }
}

/**
 * Prepares variables for jcc staff templates.
 *
 * Default template: jcc-staff.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the jcc staff information
 *     and any fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_jcc_staff(array &$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Prepares variables for jcc cio templates.
 *
 * Default template: jcc-cio.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the jcc cio information and
 *     any fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_jcc_cio(array &$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Prepares variables for jcc officer templates.
 *
 * Default template: jcc-officer.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the jcc officer information and
 *     any fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_jcc_officer(array &$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Prepares variables for jcc ajp templates.
 *
 * Default template: jcc-ajp.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the jcc ajp information and
 *     any fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_jcc_ajp(array &$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Prepares variables for jcc court templates.
 *
 * Default template: jcc-court.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the jcc court information and
 *     any fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_jcc_court(array &$variables) {
  $entityTypeManager = \Drupal::entityTypeManager();
  $court_entity = \Drupal::routeMatch()->getParameter('jcc_court');
  $court_id = $court_entity instanceof EntityInterface ? $court_entity->id() : NULL;
  $court_type_label = '';
  if (!$court_entity->get('court_type')->isEmpty()) {
    $court_type_label = $court_entity->get('court_type')->entity->label();
  }
  $name_parts = [];
  foreach (['name_1', 'name_2', 'name_3'] as $field) {
    if (!$court_entity->get($field)->isEmpty()) {
      $name_parts[] = $court_entity->get($field)->value;
    }
  }
  $full_name = implode(' ', $name_parts);
  $variables['name_and_type'] = $full_name;
  $loadEntities = function ($entity_type, $court_id, $job_title = NULL) use ($entityTypeManager) {
    $query = $entityTypeManager->getStorage($entity_type)->getQuery();
    $query->condition('court', $court_id);
    if ($job_title) {
      $query->condition('job_title', $job_title);
    }
    $query->accessCheck(TRUE);
    $ids = $query->execute();
    $results = $entityTypeManager->getStorage($entity_type)->loadMultiple($ids);
    return $results;
  };
  $extractNameData = function ($entity) {
    return [
      'fname' => $entity->get('first_name')->value,
      'mname' => $entity->hasField('middle_name') ? $entity->get('middle_name')->value : '',
      'lname' => $entity->get('last_name')->value,
    ];
  };

  $getOfficerDataByJob = function ($court_id, $job_label) use ($entityTypeManager, $loadEntities, $extractNameData) {
    $term_storage = $entityTypeManager->getStorage('taxonomy_term');
    $tids = $term_storage->getQuery()
      ->condition('vid', 'job_title')
      ->condition('name', $job_label)
      ->accessCheck(TRUE)
      ->execute();

    $tid = reset($tids);
    if (!$tid) {
      return [];
    }
    $officers = $loadEntities('jcc_officer', $court_id, $tid);
    $data = [];
    foreach ($officers as $officer) {
      $data[] = $extractNameData($officer);
    }
    return $data;
  };

  // CIO data - For Superior courts.
  if ($court_type_label !== "Court of Appeal") {
    $cios = $loadEntities('jcc_cio', $court_id);
    $cio_data = [];
    foreach ($cios as $cio) {
      $item = $extractNameData($cio);
      if (!$cio->get('job_title')->isEmpty()) {
        $term = $cio->get('job_title')->entity;
        if ($term) {
          $item['job_class'] = $term->label();
        }
      }
      $cio_data[] = $item;
    }
    $variables['cio_data'] = $cio_data;
  }

  $addresses = $loadEntities('jcc_address', $court_id);
  if (!empty($addresses)) {
    $addr_data = [];
    foreach ($addresses as $address) {
      $addr_data[] = [
        'addr1' => $address->get('addr1')->value,
        'addr2' => $address->get('addr2')->value,
        'city' => $address->get('city')->value,
        'state' => $address->get('state')->value,
        'zip' => $address->get('zip')->value,
        'mailing_addr1' => $address->get('mailing_addr1')->value,
        'phone' => $address->get('phone')->value,
        'fax' => $address->get('fax')->value,
        'loc_num' => $address->get('loc_num')->value,
      ];
    }
    $variables['address_data'] = $addr_data;
  }
  else {
    $district_name = $court_entity->name_2->value ?? '';
    if ($court_type_label === "Court of Appeal") {
      $division = $entityTypeManager->getStorage('jcc_court')->getQuery();
      $division->condition('name_2', $district_name);
      $division->sort('id', 'ASC');
      $division->range(0, 1);
      $first_division_ids = $division->execute();

      if (!empty($first_division_ids)) {
        $first_division_id = reset($first_division_ids);
        $variables['appeal_exec_officer'] = $getOfficerDataByJob($first_division_id, 'Court of Appeal - Clerk/Executive Officer');

        // For Appellate CIO data:
        $cios = $loadEntities('jcc_cio', $first_division_id);
        $cio_data = [];
        foreach ($cios as $cio) {
          $item = $extractNameData($cio);
          if (!$cio->get('job_title')->isEmpty()) {
            $term = $cio->get('job_title')->entity;
            if ($term) {
              $item['job_class'] = $term->label();
            }
          }
          $cio_data[] = $item;
        }
        $variables['cio_data'] = $cio_data;

        $query = $entityTypeManager->getStorage('jcc_address')->getQuery();
        $query->condition('court', $first_division_id);
        $query->range(0, 1);
        $query->accessCheck(TRUE);
        $address_ids = $query->execute();
        if (!empty($address_ids)) {
          $address = $entityTypeManager->getStorage('jcc_address')->load(reset($address_ids));
          $addr_id = $address->get('addr_id')->value;

          $addr_query = $entityTypeManager->getStorage('jcc_address')->getQuery();
          $addr_query->condition('addr_id', $addr_id);
          $addr_query->condition('loc_num', 1);
          $addr_query->range(0, 1);
          $addr_query->accessCheck(TRUE);
          $main_ids = $addr_query->execute();
          if (!empty($main_ids)) {
            $main_address = $entityTypeManager->getStorage('jcc_address')->load(reset($main_ids));

            $variables['address_data'] = [
              [
                'addr1' => $main_address->get('addr1')->value,
                'addr2' => $main_address->get('addr2')->value,
                'city' => $main_address->get('city')->value,
                'state' => $main_address->get('state')->value,
                'zip' => $main_address->get('zip')->value,
                'mailing_addr1' => $main_address->get('mailing_addr1')->value,
                'mailing_city' => $main_address->get('mailing_city')->value,
                'mailing_state' => $main_address->get('mailing_state')->value,
                'mailing_zip' => $main_address->get('mailing_zip')->value,
                'phone' => $main_address->get('phone')->value,
                'fax' => $main_address->get('fax')->value,
                'loc_num' => $main_address->get('loc_num')->value,
              ],
            ];
          }
        }
      }
    }
  }

  if ($court_type_label === "Court of Appeal") {
    $presiding_judge = $getOfficerDataByJob($court_id, 'Court of Appeal Presiding Justice');
    $variables['presiding_judge'] = $presiding_judge;
  }
  else {
    $variables['judge_data'] = $getOfficerDataByJob($court_id, 'Superior Court Presiding Judge');
    $variables['exec_officer_data'] = $getOfficerDataByJob($court_id, 'Superior Court - Court Executive Officer');
  }
  $officer_query = $entityTypeManager->getStorage('jcc_officer')->getQuery();
  $officer_query->condition('court', $court_id);
  $officer_query->accessCheck(TRUE);
  $officer_query->sort('last_name', 'ASC');
  $officer_query->sort('first_name', 'ASC');
  $officer_ids = $officer_query->execute();
  $officers = $entityTypeManager->getStorage('jcc_officer')->loadMultiple($officer_ids);
  $grouped_officers = [];
  foreach ($officers as $officer) {
    $name_parts = array_filter([
      $officer->get('first_name')->value,
      $officer->get('middle_name')->value,
      $officer->get('last_name')->value,
    ]);
    $full_name = implode(' ', $name_parts);
    $loc_num = '';
    if (!$officer->get('address')->isEmpty()) {
      $address_entity = $officer->get('address')->entity;
      if ($address_entity) {
        $loc_num = $address_entity->get('loc_num')->value;
      }
    }
    $grouped_officers[$loc_num][] = [
      'data' => [
        $full_name,
        $officer->get('job_title')->entity ? $officer->get('job_title')->entity->label() : '',
        $officer->get('email')->value,
      ],
    ];
  }

  $tables_by_location = [];
  $header = [
    'name' => [
      'data' => t('Name'),
      'field' => 'first_name',
      'sort' => 'asc',
    ],
    'title' => [
      'data' => t('Title'),
      'field' => 'job_title',
    ],
    'contact' => [
      'data' => t('Contact'),
    ],
  ];
  foreach ($grouped_officers as $loc_num => $rows) {
    $flat_rows = [];
    foreach ($rows as $row) {
      $flat_rows[] = $row['data'];
    }
    $tables_by_location[$loc_num] = [
      '#theme' => 'table',
      '#header' => $header,
      '#rows' => $flat_rows,
      '#empty' => t('No officers found at this location.'),
      '#prefix' => '<div class="staff-table">',
      '#suffix' => '</div>',
      '#attributes' => [
        'class' => ['staff-table'],
      ],
    ];
  }
  $variables['officer_tables'] = $tables_by_location;
  foreach ($variables['address_data'] as &$addr) {
    $loc_num = $addr['loc_num'];
    $addr['officer_table'] = $tables_by_location[$loc_num] ?? [
      '#markup' => '<p>No officers found at this location.</p>',
    ];
  }
}
