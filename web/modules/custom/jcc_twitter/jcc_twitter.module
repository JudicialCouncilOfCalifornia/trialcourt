<?php

/**
 * @file
 * Contains jcc_twitter.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_help().
 */
function jcc_twitter_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the jcc_twitter module.
    case 'help.page.jcc_twitter':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('JCC Twitter Post') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_ENTITY_TYPE_postsave().
 */
function jcc_twitter_node_postsave(EntityInterface $entity, $op) {
  if ($op == 'delete') {
    return;
  }
  _jcc_twitter_post($entity);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function jcc_twitter_form_node_form_alter(&$form, FormStateInterface $form_state) {
  if (!in_array($form['#form_id'], ['node_news_form', 'node_news_edit_form'])) {
    return;
  }

  $twitter_names = [];
  $twitter_accounts = _jcc_twitter_get_social_post_accounts();
  foreach ($twitter_accounts as $twitter_account) {
    $t_name = $twitter_account->get('name')->first()->getValue()['value'];
    $t_id = $twitter_account->get('provider_user_id')->first()->getValue()['value'];
    $twitter_names[$t_id] =
      t('<a href="https://twitter.com/i/user/:twitterid" target="new">:name</a>',
        [':name' => $t_name, ':twitterid' => $t_id]);
  }

  $form['group_social']['twitter_fieldset'] = [
    '#type' => 'fieldset',
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#weight' => 100,
  ];
  $form['group_social']['twitter_fieldset']['twitter_enable'] = [
    '#type' => 'checkbox',
    '#title' => t('Post to Twitter'),
    '#return_value' => 1,
  ];
  $form['group_social']['twitter_fieldset']['twitter_accounts'] = [
    '#type' => 'checkboxes',
    '#title' => t('Select Twitter Accounts'),
    '#options' => $twitter_names,
    '#states' => [
      'visible' => [
        ':input[name="twitter_enable"]' => ['checked' => TRUE],
      ],
    ],
  ];
  $form['group_social']['twitter_fieldset']['twitter_message'] = [
    '#type' => 'textarea',
    '#title' => t('Message'),
    '#default_value' => t(':title :link'),
    '#states' => [
      'visible' => [
        ':input[name="twitter_enable"]' => ['checked' => TRUE],
      ],
    ],
    '#description' => t('Use :title and :link as placeholders.'),
  ];

  // Moving the list to the social fieldgroup.
  $form['#group_children']['twitter_fieldset'] = 'group_social';
  $form['#fieldgroups']['group_social']->children[] = 'twitter_fieldset';

  $form['#validate'][] = 'jcc_twitter_form_validate';
  foreach (array_keys($form['actions']) as $action) {
    if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
      $form['actions'][$action]['#submit'][] = 'jcc_twitter_form_submit';
    }
  }
}

/**
 * Implements custom validate handler.
 *
 * @param array $form
 *   Existing form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Existing state.
 */
function jcc_twitter_form_validate(array $form, FormStateInterface $form_state) {
  if ($form_state->getValue('twitter_enable')) {
    $accounts = array_filter($form_state->getValue('twitter_accounts'));
    if (empty($accounts)) {
      $form_state->setErrorByName('twitter_accounts', t('Select a Twitter account.'));
    }
    $message = trim($form_state->getValue('twitter_message'));
    if (empty($message)) {
      $form_state->setErrorByName('twitter_message', t('Set a message.'));
    }
  }
}

/**
 * Implements custom submit handler to process twitter posting.
 *
 * @param array $form
 *   Existing form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Existing form state.
 */
function jcc_twitter_form_submit(array &$form, FormStateInterface $form_state) {
  $tempstore = \Drupal::service('tempstore.shared')->get('jcc_twitter');

  $twitter = [
    'enable' => $form_state->getValue('twitter_enable'),
    'accounts' => array_filter($form_state->getValue('twitter_accounts')),
    'message' => $form_state->getValue('twitter_message'),
  ];

  $tempstore->set($form_state->getValue('nid'), $twitter);
}

/**
 * Gets the accounts associated to the Drupal user.
 *
 * @return \Drupal\Core\Entity\EntityInterface[]
 *   Returns all twitter accounts.
 */
function _jcc_twitter_get_social_post_accounts() {
  return \Drupal::entityTypeManager()->getStorage('social_post')->loadMultiple();
}

/**
 * Implements twitter post callback.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   Existing entity.
 */
function _jcc_twitter_post(EntityInterface $entity) {
  if ($entity->bundle() == 'news') {

    $news_types = [];
    foreach ($entity->field_news_type as $item) {
      if ($item->entity) {
        $news_types[$item->entity->id()] = $item->entity->label();
      }
    }
    if (!in_array('NewsLink', $news_types) &&
      $entity->isPublished()
    ) {

      $tempstore = \Drupal::service('tempstore.shared')->get('jcc_twitter');
      $twitter = $tempstore->get($entity->id());
      if (empty($twitter)) {
        return;
      }

      if ((isset($twitter['enable']) && !$twitter['enable'])) {
        $tempstore->delete($entity->id());
        return;
      }

      $tweet = [
        'status' => str_replace(
          [
            ':link',
            ':title',
          ],
          [
            $entity->toUrl()->setAbsolute()->toString(),
            $entity->getTitle(),
          ],
          $twitter['message']),
      ];

      /** @var Abraham\TwitterOAuth\TwitterOAuth $client */
      $client = \Drupal::service('plugin.network.manager')->createInstance('social_post_twitter')->getSdk();

      /** @var Drupal\social_post_twitter\TwitterPostManager $post_manager */
      $post_manager = \Drupal::service('twitter_post.manager');

      $social_post = \Drupal::entityTypeManager()->getStorage('social_post');
      foreach ($twitter['accounts'] as $t_id) {
        \Drupal::logger('twitter')->notice($t_id);
        $account = $social_post->loadByProperties([
          'provider_user_id' => $t_id,
        ]);
        $account = array_pop($account);
        // Set OAuth token for the account.
        $token = json_decode($account->getToken());
        $client->setOauthToken($token->oauth_token, $token->oauth_token_secret);

        // Make a post to Twitter with the account!
        $post_manager->setClient($client)->doPost($tweet);
      }

      $tempstore->delete($entity->id());
    }
  }
}
