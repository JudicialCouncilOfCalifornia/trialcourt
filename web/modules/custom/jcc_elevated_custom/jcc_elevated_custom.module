<?php

/**
 * @file
 * Contains jcc_elevated_custom.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Site\Settings;

/**
 * Get the machine name of the site.
 *
 * @return string
 *   Return the machine name of the site.
 */
function jcc_elevated_get_site_name() {
  return Settings::get('jcc_elevated.site_machine_name') ?? \Drupal::state()->get('jcc_elevated.site_machine_name');
}

/**
 * Get a specific JCC Elevated related setting.
 *
 * @return string|array
 *   Return a specific jcc state setting value.
 */
function jcc_elevated_get_custom_setting($setting_name) {
  return \Drupal::state()->get($setting_name) ?? NULL;
}

/**
 * Get JCC Elevated related settings.
 *
 * Add key names in jcc_elevated_keys().
 *
 * @return array
 *   Returns all set jcc state settings and their values.
 */
function jcc_elevated_get_custom_settings($setting_name = NULL) {
  $settings = [];
  foreach (_jcc_elevated_custom_keys() as $name) {
    $settings[$name] = \Drupal::state()->get($name);
    if ($name == 'jcc_elevated.site_machine_name') {
      $settings[$name] = jcc_elevated_get_site_name();
    }
  }

  \Drupal::moduleHandler()->alter('jcc_elevated_settings', $settings);

  return $settings[$setting_name] ?? $settings;
}

/**
 * Maintain a list of JCC Elevated related settings.
 *
 * These will be returned when jcc_elevated_get_custom_settings() is called.
 *
 * @return array
 *   Return the specific keys for state values.
 */
function _jcc_elevated_custom_keys() {
  return [
    'jcc_elevated.site_machine_name',
    'jcc_elevated.primary_menu',
    'jcc_elevated.primary_menu_style',
    'jcc_elevated.utility_menu',
    'jcc_elevated.utility_menu_style',
    'jcc_elevated.sidebar_menu_placement',
    'jcc_elevated.sidebar_menu_style',
    'jcc_elevated.sidebar_menu_types',
    'jcc_elevated.section_menu_placement',
    'jcc_elevated.section_menu_style',
    'jcc_elevated.section_menu_types',
  ];
}

/**
 * Implements hook_preprocess_page().
 */
function jcc_elevated_custom_preprocess_page(array &$variables) {
  $variables['#attached']['library'][] = 'jcc_elevated_custom/jcc-elevated-custom';

  // Set the variable in case it's not yet set.
  if (!isset($variables['section_navigation'])) {
    $variables['section_navigation'] = FALSE;
  }
}

/**
 * Implements hook_preprocess_page().
 */
function jcc_elevated_custom_preprocess_node(array &$variables) {

  // Set the variable in case it's not yet set.
  if (!isset($variables['sidebar_navigation'])) {
    $variables['section_navigation'] = FALSE;
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function jcc_elevated_custom_field_widget_entity_reference_paragraphs_form_alter(&$element, &$form_state, $context) {
  if ($element['#paragraph_type'] == 'views_reference') {
    // Hide access to view reference variants on elevated sites (sites using
    // the elevated theme).
    $element['subform']['field_variant']['#access'] = !jcc_custom_is_elevated_site();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function jcc_elevated_custom_form_content_moderation_entity_moderation_form_alter(array &$form, FormStateInterface $form_state) {

  // Alterations to the moderation form to improve style/layout.
  $form['current_label'] = [
    '#type' => 'item',
    '#title' => '',
    '#weight' => -99,
    '#markup' => t('Current moderation state:'),
  ];

  $form['current']['#type'] = 'item';
  $form['current']['#title'] = '';
  $form['current']['#weight'] = -98;

  $form['new_state_label'] = [
    '#type' => 'item',
    '#title' => '',
    '#weight' => -97,
    '#markup' => t('Change to:'),
  ];

  $form['new_state']['#title'] = '';
  $form['new_state']['#weight'] = -96;

  $form['captcha']['#access'] = FALSE;
}
