<?php

/**
 * @file
 * Contains jcc_elevated_custom.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Site\Settings;
use Drupal\editor\Entity\Editor;
use Drupal\media\MediaInterface;
use Drupal\node\NodeInterface;
use Drupal\workflows\WorkflowInterface;
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;

// @codingStandardsIgnoreStart

/**
 * Implements hook_page_attachments().
 */
function jcc_elevated_custom_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'jcc_elevated_custom/edit-media';
}

function jcc_elevated_custom_cron() {
  $today = new \DateTimeImmutable();
  $node_storage = \Drupal::entityTypeManager()->getStorage('node');
  $nids = $node_storage->getQuery()
    ->condition('type', 'surplus_materials')
    ->exists('field_renewal_date')
    ->accessCheck(FALSE)
    ->execute();

  if (empty($nids)) {
    return;
  }

  foreach ($nids as $nid) {
    $node = $node_storage->load($nid);
    if (!$node instanceof NodeInterface || $node->get('field_renewal_date')->isEmpty()) {
      continue;
    }
    $renewal_date = new \DateTimeImmutable($node->get('field_renewal_date')->value);
    $current_state = $node->get('moderation_state')->value;
    if ($renewal_date < $today && $current_state === 'published') {
      $workflow = \Drupal::service('content_moderation.moderation_information')->getWorkflowForEntity($node);
      if ($workflow instanceof WorkflowInterface) {
        $type_plugin = $workflow->getTypePlugin();
        $transitions = $type_plugin->getTransitions();
        foreach ($transitions as $transition) {
          $to_state = is_object($transition->to()) ? $transition->to()->id() : $transition->to();
          $from_states = array_map(function ($state) {
            return is_object($state) ? $state->id() : $state;
          }, $transition->from());
          if ($to_state === 'archived' && in_array($current_state, $from_states, TRUE)) {
            $node->setNewRevision(TRUE);
            $node->isDefaultRevision(TRUE);
            $node->setRevisionLogMessage('Auto-archived due to expired renewal date.');
            $node->set('moderation_state', 'archived');
            $node->save();
            break;
          }
        }
      } else {
        \Drupal::logger('jcc_elevated')->warning('No workflow found for node @nid', ['@nid' => $node->id()]);
      }
    }
  }
}

/**
 * Implements hook_ckeditor_css_alter().
 */
function jcc_elevated_custom_ckeditor_css_alter(array &$css, Editor $editor) {
  $css[] = drupal_get_path('module', 'jcc_elevated_custom') . '/css/edit-media.css';
}

/**
 * Get the machine name of the site.
 *
 * @return string
 *   Return the machine name of the site.
 */
// @codingStandardsIgnoreStart
function jcc_elevated_get_site_name() {
  return Settings::get('jcc_elevated.site_machine_name') ?? \Drupal::state()->get('jcc_elevated.site_machine_name');
}

/**
 * Get a specific JCC Elevated related setting.
 *
 * @return string|array
 *   Return a specific jcc state setting value.
 */
function jcc_elevated_get_custom_setting($setting_name): array|string|null {
  return \Drupal::state()->get($setting_name) ?? NULL;
}

/**
 * Get JCC Elevated related settings.
 *
 * Add key names in jcc_elevated_keys().
 *
 * @return array
 *   Returns all set jcc state settings and their values.
 */
function jcc_elevated_get_custom_settings($setting_name = NULL): array|string {
  $settings = [];
  foreach (_jcc_elevated_custom_keys() as $name) {
    $settings[$name] = \Drupal::state()->get($name);
    if ($name == 'jcc_elevated.site_machine_name') {
      $settings[$name] = jcc_elevated_get_site_name();
    }
  }

  \Drupal::moduleHandler()->alter('jcc_elevated_settings', $settings);

  return $settings[$setting_name] ?? $settings;
}

/**
 * Maintain a list of JCC Elevated related settings.
 *
 * These will be returned when jcc_elevated_get_custom_settings() is called.
 *
 * @return array
 *   Return the specific keys for state values.
 */
function _jcc_elevated_custom_keys(): array {
  return [
    'jcc_elevated.site_machine_name',
    'jcc_elevated.primary_menu',
    'jcc_elevated.primary_menu_style',
    'jcc_elevated.utility_menu',
    'jcc_elevated.utility_menu_style',
    'jcc_elevated.sidebar_menu_placement',
    'jcc_elevated.sidebar_menu_style',
    'jcc_elevated.sidebar_menu_types',
    'jcc_elevated.section_menu_placement',
    'jcc_elevated.section_menu_style',
    'jcc_elevated.section_menu_types',
    'jcc_elevated.footer_variant',
    'jcc_elevated.upper_footer_menu',
    'jcc_elevated.lower_footer_menu',
    'jcc_elevated.about_header',
    'jcc_elevated.about_text',
    'jcc_elevated.about_link_title',
    'jcc_elevated.about_link_url',
    'jcc_elevated.social_links_facebook',
    'jcc_elevated.social_links_linkedin',
    'jcc_elevated.social_links_rss',
    'jcc_elevated.social_links_twitter',
    'jcc_elevated.social_links_youtube',
    'jcc_elevated.social_links_flickr',
  ];
}

/**
 * Implements hook_preprocess_page().
 */
function jcc_elevated_custom_preprocess_page(array &$variables): void {
  $variables['#attached']['library'][] = 'jcc_elevated_custom/jcc-elevated-custom';

  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute();
  if ($is_admin) {
    $variables['#attached']['library'][] = 'jcc_elevated_custom/jcc-elevated-admin-custom';
  }

  // Set the variable in case it's not yet set.
  if (!isset($variables['section_navigation'])) {
    $variables['section_navigation'] = FALSE;
  }
}

/**
 * Implements hook_preprocess_page().
 */
function jcc_elevated_custom_preprocess_node(array &$variables): void {

  // Set the variable in case it's not yet set.
  if (!isset($variables['sidebar_navigation'])) {
    $variables['section_navigation'] = FALSE;
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function jcc_elevated_custom_field_widget_entity_reference_paragraphs_form_alter(&$element, &$form_state, $context): void {
  if ($element['#paragraph_type'] == 'views_reference') {
    // Hide access to view reference variants on elevated sites (sites using
    // the elevated theme).
    $element['subform']['field_variant']['#access'] = !jcc_custom_is_elevated_site();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function jcc_elevated_custom_form_content_moderation_entity_moderation_form_alter(array &$form, FormStateInterface $form_state): void {

  // Alterations to the moderation form to improve style/layout.
  $form['current_label'] = [
    '#type' => 'item',
    '#title' => '',
    '#weight' => -99,
    '#markup' => t('Current moderation state:'),
  ];

  $form['current']['#type'] = 'item';
  $form['current']['#title'] = '';
  $form['current']['#weight'] = -98;

  $form['new_state_label'] = [
    '#type' => 'item',
    '#title' => '',
    '#weight' => -97,
    '#markup' => t('Change to:'),
  ];

  $form['new_state']['#title'] = '';
  $form['new_state']['#weight'] = -96;

  $form['captcha']['#access'] = FALSE;
}

/**
 * Implements hook_form_views_exposed_form_alter().
 */
function jcc_elevated_custom_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id): void {
  // Set some variables.
  $view = $form_state->get('view');
  $name = $view->id();
  $display = $view->current_display;
  $view_name_display = $name . ':' . $display;

  // Alter the news view path.
  $current_action_path = $form['#action'];
  $current_path = \Drupal::service('path.current')->getPath();
  $current_alias_path = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
  if ($current_action_path == '/views/news' || $view_name_display == 'news:news_list') {
    $form['#action'] = $current_action_path != $current_alias_path ? $current_alias_path : $current_action_path;
  }

  // Suppress immutable filters not ready for elevated.
  unset($form['field_news_type_target_id']);
  unset($form['date_start']);
  unset($form['date_end']);

  switch ($view->id()) {
    case 'courses':
      // Group topics and subtopics.
      if (isset($form['field_topics_target_id_collapsible']) || isset($form['field_subtopics_target_id_collapsible'])) {
        $form['category_group'] = [
          '#type' => 'fieldset',
          '#title' => t('Topics & Subtopics'),
          '#weight' => 96,
        ];
        $form['category_group']['field_topics_target_id_collapsible'] = $form['field_topics_target_id_collapsible'];
        unset($form['field_topics_target_id_collapsible']);
        $form['category_group']['field_subtopics_target_id_collapsible'] = $form['field_subtopics_target_id_collapsible'];
        unset($form['field_subtopics_target_id_collapsible']);
      }

      // Reorder course type position.
      $form['field_course_type_target_id_collapsible']['#weight'] = 97;

      // Group special tag.
      if (isset($form['field_is_quick_reference_value'])) {
        $form['special_group'] = [
          '#type' => 'fieldset',
          '#title' => t('Special Tags'),
          '#weight' => 98,
        ];
        if ($form['field_is_quick_reference_value']) {
          $form['special_group']['field_is_quick_reference_value'] = $form['field_is_quick_reference_value'];
          unset($form['field_is_quick_reference_value']);
        }
      }

      // Position sorting last.
      $form['sort_bef_combine']['#weight'] = 99;

      break;
  }
}

/**
 * Implements hook_form_alter().
 */
function jcc_elevated_custom_form_alter(&$form, $form_state, $form_id): void {
  // Enhancements for Linkit if JCC CKEditor is not in use.
  if (!\Drupal::service('module_handler')->moduleExists('jcc_ckeditor_link')) {
    if ($form_id == 'editor_link_dialog') {
      if (\Drupal::service('module_handler')->moduleExists('linkit')) {
        // Display linking option if supported type.
        $supported = ['publication', 'file'];
        $deprecated_link_to_file_label = t('Link publication page to its file when saving');
        $deprecated_link_to_file_desc = t('This publication is missing a primary file which can occur for older publications, so the media page will be linked by default. Use this option to link directly to the alternate file, if valid path');
        $href = !empty($form['href_dirty_check']['#default_value']) ? $form['href_dirty_check']['#default_value'] : NULL;
        $is_media_exp = '/\/media\/(\d+)$/';
        if ($href && preg_match($is_media_exp, $href)) {
          $media_id = str_replace('/media/', '', $href);
          $media = \Drupal::entityTypeManager()->getStorage('media')->load($media_id);

          if ($media && in_array($media->bundle(), $supported) && $media->get('field_media_file')->target_id) {
            $linkit_profile_storage = \Drupal::service('entity_type.manager')->getStorage('linkit_profile');
            $linkit_profile = $linkit_profile_storage->load('default');
            $matcher = $linkit_profile->getMatcherByEntityType('media');
            // Relevant if Linkit matcher profile is in use.
            if ($matcher) {
              $matcher_config = $matcher->getConfiguration();
              $substitution_type = $matcher_config['settings']['substitution_type'];

              // Option to link page if currently linked to file by default.
              if ($matcher_config && ($substitution_type == 'media')) {
                $link_attributes = $form_state->getStorage();
                if (!$link_attributes['link_element']['data-entity-substitution']) {
                  $link_to_page = TRUE;
                }

                $form['link_to_page'] = [
                  '#type' => 'checkbox',
                  '#title' => t('Link file or publication to their media page when saving (e.g. /media/1234)'),
                  '#description' => t('Use this option if you do not want to link to media file directly.'),
                  '#required' => FALSE,
                  '#default_value' => $link_to_page ?? FALSE,
                ];
                $form['actions']['save_modal']['#submit'][] = 'jcc_elevated_custom_link_to_page_submit';
              }
            }
          }
          elseif ($media && in_array($media->bundle(), $supported) && $media->get('field_media_file_multiple')->target_id) {
            // Compatibility for older publications.
            $form['link_to_file'] = [
              '#type' => 'checkbox',
              '#title' => $deprecated_link_to_file_label,
              '#description' => $deprecated_link_to_file_desc,
              '#required' => FALSE,
              '#default_value' => FALSE,
            ];
            $form['actions']['save_modal']['#submit'][] = 'jcc_elevated_deprecated_link_to_file_submit';
          }
        }
        else {
          // Compatibility for older publications.
          $entity_type_manager = \Drupal::service('entity_type.manager');
          $path_parts = pathinfo($href);
          $file = $entity_type_manager->getStorage('file')->loadByProperties(['filename' => $path_parts['basename']]);

          if ($file) {
            $fid = array_shift($file)->fid->value;
            $media = $entity_type_manager->getStorage('media')->loadByProperties(['field_media_file_multiple' => [$fid]]);
            $media = array_shift($media);

            if ($media && $media->bundle() == 'publication' && !$media->get('field_media_file')->target_id) {
              $form['link_to_file'] = [
                '#type' => 'checkbox',
                '#title' => $deprecated_link_to_file_label,
                '#description' => $deprecated_link_to_file_desc,
                '#required' => FALSE,
                '#default_value' => TRUE,
              ];
              $form['actions']['save_modal']['#submit'][] = 'jcc_elevated_deprecated_link_to_file_submit';
            }
          }
        }
      }
    }
  }
}

function jcc_elevated_custom_form_node_surplus_materials_edit_form_alter(array &$form, FormStateInterface $form_state) {
  $form['#validate'][] = 'jcc_elevated_custom_validate_disposition_if_archived';
  $form['field_disposition']['widget']['#required'] = FALSE;
  $form['field_disposition']['widget']['#default_value'] = '';
}

function jcc_elevated_custom_validate_disposition_if_archived(array &$form, FormStateInterface $form_state) {
  $input = $form_state->getUserInput();
  $moderation_state = $input['moderation_state'][0]['state'] ?? NULL;
  if ($moderation_state === 'archived') {
    $form_state->setValue(['field_disposition', 0, 'value'], '');
    $disposition = $form_state->getValue(['field_disposition', 0, 'value']);
    if ($disposition === '') {
      $form_state->setErrorByName('field_disposition', t('Disposition is required while archiving an item.'));
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for the surplus_materials node form.
 */
function jcc_elevated_custom_form_node_surplus_materials_form_alter(array &$form, FormStateInterface $form_state) {
  if (isset($form['field_terms_of_use'])) {
    $form['field_terms_of_use']['widget']['value']['#title'] = 'I agree to the <a href="/terms-of-use" target="_blank">Terms of Use</a>';
    //$form['field_terms_of_use']['widget']['#title_display'] = 'invisible';
  }
  $node = $form_state->getFormObject()->getEntity();
  if ($node->isNew()) {
    unset($form['field_disposition']['widget']['#value']);
    $form['field_disposition']['widget']['#default_value'] = 'NewListing';
  }
}

/**
 * Custom callback for linkit modal window.
 */
function jcc_elevated_custom_link_to_page_submit(&$form, $form_state): void {
  // Wrapped in a module check, because this functionality should be controlled
  // by jcc_ckeditor_link if it is enabled.
  if (!\Drupal::service('module_handler')->moduleExists('jcc_ckeditor_link')) {
    // Toggle URL substitution in the link attributes.
    // Abides to default currently set in Linkit matcher.
    $href = $form_state->getValue('attributes')['href'];
    $is_media_exp = '/\/media\/(\d+)$/';
    if (preg_match($is_media_exp, $href)) {
      // Get media entity and retrieve its first file's url.
      $media_id = str_replace('/media/', '', $href);
      $entity_type_manager = \Drupal::service('entity_type.manager');
      $media = $entity_type_manager->getStorage('media')->load($media_id);

      if ($form_state->getValue('link_to_page') == '1') {
        // Remove media attributes including url substitution.
        $form_state->setValue('attributes', [
          'data-entity-substitution' => '',
          'data-entity-bundle' => '',
          'data-entity-type' => '',
          'data-entity-uuid' => '',
        ]);
      } else {
        // Restore/reset media attributes as needed.
        $form_state->setValue('attributes', [
          'data-entity-substitution' => 'media',
          'data-entity-bundle' => $media->bundle(),
          'data-entity-type' => 'media',
          'data-entity-uuid' => $media->uuid(),
        ]);
      }
    }
    else {
      // If no longer media.
      $form_state->setValue('attributes', [
        'href' => $href,
        'data-entity-substitution' => '',
        'data-entity-bundle' => '',
        'data-entity-type' => '',
        'data-entity-uuid' => '',
      ]);
    }
  }
}

/**
 * Deprecated custom callback for linkit modal window.
 */
function jcc_elevated_deprecated_link_to_file_submit(&$form, $form_state): void {
  // Wrapped in a module check, because this functionality should be controlled
  // by jcc_ckeditor_link if it is enabled.
  if (!\Drupal::service('module_handler')->moduleExists('jcc_ckeditor_link')) {
    $entity_type_manager = \Drupal::service('entity_type.manager');
    $href = $form_state->getValue('attributes')['href'];
    $is_media_exp = '/\/media\/(\d+)$/';
    if (preg_match($is_media_exp, $href)) {
      if ($form_state->getValue('link_to_file') == '1') {
        // Get media entity and retrieve its first file's url.
        $media_id = str_replace('/media/', '', $href);
        $media = $entity_type_manager->getStorage('media')->load($media_id);

        // If no file then skip the logic.
        if ($media->get('field_media_file_multiple')) {
          $fid = $media->field_media_file_multiple->first()->target_id;
          $file = $entity_type_manager->getStorage('file')->load($fid);
          $file_url = $file->createFileUrl(TRUE);

          // Populate form state with new url.
          $form_state->setValue('href_dirty_check', $file_url);
          $form_state->setValue('attributes', [
            'href' => $file_url,
            'data-entity-substitution' => '',
            'data-entity-bundle' => '',
            'data-entity-type' => '',
            'data-entity-uuid' => '',
          ]);
        }
      }
    }
    else {
      // Change to media URL from filename.
      $path_parts = pathinfo($href);
      $file = $entity_type_manager->getStorage('file')->loadByProperties(['filename' => $path_parts['basename']]);
      if ($file) {
        if ($form_state->getValue('link_to_file') == '0') {
          $fid = array_shift($file)->fid->value;
          $media = $entity_type_manager->getStorage('media')->loadByProperties(['field_media_file_multiple' => [$fid]]);
          if ($media) {
            $media = array_shift($media);
            $media_url = '/media/' . $media->id();
            $form_state->setValue('href_dirty_check', $media_url);
            $form_state->setValue('attributes', [
              'href' => $media_url,
              'data-entity-substitution' => 'media',
              'data-entity-bundle' => $media->bundle(),
              'data-entity-type' => 'media',
              'data-entity-uuid' => $media->uuid(),
            ]);
          }
        }
      }
      else {
        // If no longer media.
        $form_state->setValue('attributes', [
          'href' => $href,
          'data-entity-substitution' => '',
          'data-entity-bundle' => '',
          'data-entity-type' => '',
          'data-entity-uuid' => '',
        ]);
      }
    }
  }
}

/**
 * Implements hook_preprocess_VIEW_ID().
 */
function jcc_elevated_custom_preprocess_views_view_table(&$variables): void {
  $view = $variables['view'];
  if ($view->current_display == 'publication_manager') {
    // Check if first publication have the jcc_section field available.
    $first_result = $view->result[0]->_entity ?? FALSE;
    if ($first_result && $first_result->hasField('jcc_section')) {
      // Check if the view doesn't already have the field in display.
      if (!isset($variables['fields']['jcc_section'])) {
        $view->addHandler('publication_manager', 'field', 'node_field_data', 'jcc_section', [], NULL);
        $view->save();
      }
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function jcc_elevated_custom_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id): void {

  // Revision log changes.
  if (isset($form['revision_log'])) {
    $form['revision_log']['widget'][0]['value']['#rows'] = 2;
  }

  // Order some items.
  if (isset($form['options'])) {
    $form['options']['#weight'] = 75;
  }

  if (isset($form['path'])) {
    $form['path']['#weight'] = 80;
    $form['path']['widget'][0]['#weight'] = 1;
    $form['path']['widget'][0]['#open'] = FALSE;
  }

  if (isset($form['scheduler_settings'])) {
    $form['scheduler_settings']['#weight'] = 85;
  }

  if (isset($form['search_api_exclude'])) {
    $form['search_api_exclude']['#weight'] = 90;
  }

  if (isset($form['xmlsitemap'])) {
    $form['xmlsitemap']['#weight'] = 95;
  }

  if (isset($form['author'])) {
    $form['author']['#weight'] = 99;
  }

  if (isset($form['publish_on'])) {
    $form['publish_on']['#weight'] = 1;
  }

  if (isset($form['publish_state'])) {
    $form['publish_state']['#weight'] = 2;
  }

  if (isset($form['unpublish_on'])) {
    $form['unpublish_on']['#weight'] = 3;
  }

  if (isset($form['unpublish_state'])) {
    $form['unpublish_state']['#weight'] = 4;
  }
}

/**
 * Implements hook_field_group_form_process().
 */
function jcc_elevated_custom_field_group_form_process(array &$element, &$group, &$complete_form): void {

  // Order some items.
  if (isset($complete_form['options'])) {
    $complete_form['options']['#weight'] = 75;
  }

  if (isset($complete_form['path'])) {
    $complete_form['path']['#weight'] = 80;
  }

  if (isset($complete_form['scheduler_settings'])) {
    $complete_form['scheduler_settings']['#weight'] = 85;
  }

  if (isset($complete_form['search_api_exclude'])) {
    $complete_form['search_api_exclude']['#weight'] = 90;
  }

  if (isset($complete_form['xmlsitemap'])) {
    $complete_form['xmlsitemap']['#weight'] = 95;
  }

  if (isset($complete_form['author'])) {
    $complete_form['author']['#weight'] = 99;
  }

  if (isset($complete_form['publish_on'])) {
    $complete_form['publish_on']['#weight'] = 2;
  }

  if (isset($complete_form['publish_state'])) {
    $complete_form['publish_state']['#weight'] = 3;
  }

  if (isset($complete_form['unpublish_on'])) {
    $complete_form['unpublish_on']['#weight'] = 4;
  }

  if (isset($complete_form['unpublish_state'])) {
    $complete_form['unpublish_state']['#weight'] = 5;
  }
}

/**
 * Implements hook_form_FORMID_alter().
 */
function jcc_elevated_custom_form_node_alert_form_alter(&$form, $form_state): void {
  $form['field_toggle']['widget']['value']['#description'] = t('This enables a closing "X" that will remove the alert from the page');
  $description = [
    t('This sets the alert to show ONLY on the website home page.'),
    t('It does NOT set the alert to display on a section or sub-site "home" page. A specific page must be used for that.'),
  ];
  $form['field_switch']['widget']['value']['#description'] = implode(' ', $description);
}

/**
 * Implements hook_file_download().
 */
function jcc_elevated_custom_file_download($uri): array {
  // Do not allow file viewing if authenticated access only.
  switch (__jcc_site_name()) {
    // If CJER officers site.
    case 'cjer-judicial':
      __jcc_restrict_to_authenticated();
      break;
  }

  // Set all document files to set the appropriate name when a download link is
  // clicked. Because of the private file system, the last part of the main url
  // is used. In private files output, that always ends in /files, which causes
  // the default name to always be 'files'.
  $filename = \Drupal::service('file_system')->basename($uri);
  $mime = \Drupal::service('file.mime_type.guesser')->guess($uri);

  // Render HTML content only if uploaded into supported directory.
  $scheme = \Drupal::service('stream_wrapper_manager')->getScheme($uri);
  $html_dir_regex = '/\/\/html\//';
  if ($scheme == 'private' && preg_match($html_dir_regex, $uri)) {
    // Allow CSS & JS to render.
    $file_ext_regex = '/([\w]{2,4})(?|$)/';
    preg_match($file_ext_regex, $uri, $file_ext);
    switch ($file_ext[0]) {
      case 'css':
        return [
          'Content-Type' => 'text/css',
        ];
      case 'js':
        return [
          'Content-Type' => 'text/javascript',
        ];
    }

    // Render HTML pages rather download.
    $mime = \Drupal::service('file.mime_type.guesser')->guess($uri);
    switch ($mime) {
      case 'text/html':
        $filename = \Drupal::service('file_system')->basename($uri);
        return [
          'Content-disposition' => 'inline; filename="' . $filename . '"',
        ];
    }
  }

  // inline will open in browser. attachment forces direct download. We want to
  // give browsers the options to display a pdf in window. The users browser
  // settings will ultimately determine what is allowed.
  $type = $mime == 'application/pdf' ? 'inline;' : 'attachment;';

  $disposition = $type . ' filename="' . $filename . '"';
  return [
    'Content-disposition' => $disposition,
  ];
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function jcc_elevated_custom_media_access(MediaInterface $media, $op, AccountInterface $account) {
  // Do not allow media page viewing if authenticated access only.
  switch (__jcc_site_name()) {
    // If CJER officers site.
    case 'cjer-judicial':
      __jcc_restrict_to_authenticated();
      break;
  }
}

/**
 * Helper function return site machine name.
 */
function __jcc_site_name() {
  $config_dir = Settings::get('config_sync_directory');
  $pattern = '/(?<=config-)(?s)(.*$)/';
  preg_match($pattern, $config_dir, $site);

  return $site[0];
}

/**
 * Helper function to deny access if not authenticated.
 */
function __jcc_restrict_to_authenticated() {
  $current_user = \Drupal::currentUser();
  $user_roles = $current_user->getRoles();
  if (!in_array('authenticated', $user_roles)) {
    return throw new AccessDeniedHttpException();
  }
}
