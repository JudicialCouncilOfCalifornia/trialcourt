<?php

/**
 * @file
 * Contains jcc_elevated_custom.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Site\Settings;
use Drupal\file\Entity\File;
use Drupal\media\Entity\Media;

// @codingStandardsIgnoreStart
/**
 * Get the machine name of the site.
 *
 * @return string
 *   Return the machine name of the site.
 */
// @codingStandardsIgnoreStart
function jcc_elevated_get_site_name() {
  return Settings::get('jcc_elevated.site_machine_name') ?? \Drupal::state()->get('jcc_elevated.site_machine_name');
}

/**
 * Get a specific JCC Elevated related setting.
 *
 * @return string|array
 *   Return a specific jcc state setting value.
 */
function jcc_elevated_get_custom_setting($setting_name): array|string|null {
  return \Drupal::state()->get($setting_name) ?? NULL;
}

/**
 * Get JCC Elevated related settings.
 *
 * Add key names in jcc_elevated_keys().
 *
 * @return array
 *   Returns all set jcc state settings and their values.
 */
function jcc_elevated_get_custom_settings($setting_name = NULL): array|string {
  $settings = [];
  foreach (_jcc_elevated_custom_keys() as $name) {
    $settings[$name] = \Drupal::state()->get($name);
    if ($name == 'jcc_elevated.site_machine_name') {
      $settings[$name] = jcc_elevated_get_site_name();
    }
  }

  \Drupal::moduleHandler()->alter('jcc_elevated_settings', $settings);

  return $settings[$setting_name] ?? $settings;
}
// @codingStandardsIgnoreEnd

/**
 * Maintain a list of JCC Elevated related settings.
 *
 * These will be returned when jcc_elevated_get_custom_settings() is called.
 *
 * @return array
 *   Return the specific keys for state values.
 */
function _jcc_elevated_custom_keys(): array {
  return [
    'jcc_elevated.site_machine_name',
    'jcc_elevated.primary_menu',
    'jcc_elevated.primary_menu_style',
    'jcc_elevated.utility_menu',
    'jcc_elevated.utility_menu_style',
    'jcc_elevated.sidebar_menu_placement',
    'jcc_elevated.sidebar_menu_style',
    'jcc_elevated.sidebar_menu_types',
    'jcc_elevated.section_menu_placement',
    'jcc_elevated.section_menu_style',
    'jcc_elevated.section_menu_types',
  ];
}

// @codingStandardsIgnoreEnd

/**
 * Implements hook_preprocess_page().
 */
function jcc_elevated_custom_preprocess_page(array &$variables): void {
  $variables['#attached']['library'][] = 'jcc_elevated_custom/jcc-elevated-custom';

  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute();
  if ($is_admin) {
    $variables['#attached']['library'][] = 'jcc_elevated_custom/jcc-elevated-admin-custom';
  }

  // Set the variable in case it's not yet set.
  if (!isset($variables['section_navigation'])) {
    $variables['section_navigation'] = FALSE;
  }
}

/**
 * Implements hook_preprocess_page().
 */
function jcc_elevated_custom_preprocess_node(array &$variables): void {

  // Set the variable in case it's not yet set.
  if (!isset($variables['sidebar_navigation'])) {
    $variables['section_navigation'] = FALSE;
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function jcc_elevated_custom_field_widget_entity_reference_paragraphs_form_alter(&$element, &$form_state, $context): void {
  if ($element['#paragraph_type'] == 'views_reference') {
    // Hide access to view reference variants on elevated sites (sites using
    // the elevated theme).
    $element['subform']['field_variant']['#access'] = !jcc_custom_is_elevated_site();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function jcc_elevated_custom_form_content_moderation_entity_moderation_form_alter(array &$form, FormStateInterface $form_state): void {

  // Alterations to the moderation form to improve style/layout.
  $form['current_label'] = [
    '#type' => 'item',
    '#title' => '',
    '#weight' => -99,
    '#markup' => t('Current moderation state:'),
  ];

  $form['current']['#type'] = 'item';
  $form['current']['#title'] = '';
  $form['current']['#weight'] = -98;

  $form['new_state_label'] = [
    '#type' => 'item',
    '#title' => '',
    '#weight' => -97,
    '#markup' => t('Change to:'),
  ];

  $form['new_state']['#title'] = '';
  $form['new_state']['#weight'] = -96;

  $form['captcha']['#access'] = FALSE;
}

/**
 * Implements hook_form_views_exposed_form_alter().
 */
function jcc_elevated_custom_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id): void {
  // Set some variables.
  $view = $form_state->get('view');
  $name = $view->id();
  $display = $view->current_display;
  $view_name_display = $name . ':' . $display;

  // Alter the news view.
  $current_action_path = $form['#action'];
  $current_path = \Drupal::service('path.current')->getPath();
  $current_alias_path = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
  if ($current_action_path == '/views/news' || $view_name_display == 'news:news_list') {
    $form['#action'] = $current_action_path != $current_alias_path ? $current_alias_path : $current_action_path;
  }
}

/**
 * Implements hook_form_alter().
 */
function jcc_elevated_custom_form_alter(&$form, $form_state, $form_id): void {
  // Wrapped in a module check, because this functionality should be controlled
  // by jcc_ckeditor_link if it is enabled.
  if (!\Drupal::service('module_handler')->moduleExists('jcc_ckeditor_link')) {
    if ($form_id == 'editor_link_dialog') {
      $form['link_to_file'] = [
        '#type' => 'checkbox',
        '#title' => t('Link media to file when saving'),
        '#required' => FALSE,
        '#default_value' => FALSE,
      ];
      $form['actions']['save_modal']['#submit'][] = 'jcc_elevated_custom_link_to_file_submit';
    }
  }
}

/**
 * Implements hook_preprocess_VIEW_ID().
 */
function jcc_elevated_custom_preprocess_views_view_table(&$variables): void {
  $view = $variables['view'];
  if ($view->current_display == 'publication_manager') {
    // Check if first publication have the jcc_section field available.
    $first_result = $view->result[0]->_entity;
    if ($first_result->hasField('jcc_section')) {
      // Check if the view doesn't already have the field in display.
      if (!isset($variables['fields']['jcc_section'])) {
        $view->addHandler('publication_manager', 'field', 'node_field_data', 'jcc_section', [], NULL);
        $view->save();
      }
    }
  }
}

/**
 * Custom callback for linkit modal window.
 */
function jcc_elevated_custom_link_to_file_submit(&$form, $form_state): void {
  // Wrapped in a module check, because this functionality should be controlled
  // by jcc_ckeditor_link if it is enabled.
  if (!\Drupal::service('module_handler')->moduleExists('jcc_ckeditor_link')) {
    if ($form_state->getValue('link_to_file') == '1') {
      if (str_contains($form_state->getValue('href_dirty_check'), '/media/')) {

        // Get media entity and retrieve its first file's url.
        $media_id = str_replace("/media/", "", $form_state->getValue('href_dirty_check'));
        $media = Media::load($media_id);

        // If no file then skip the logic.
        if ($media->field_media_file_multiple) {
          $fid = $media->field_media_file_multiple->first()->target_id;
          $file = File::load($fid);
          $file_url = $file->createFileUrl(TRUE);

          // Populate form state with new url.
          $form_state->setValue('href_dirty_check', $file_url);
          $form_state->setValue('attributes', [
            'href' => $file_url,
            'data-entity-type' => '',
            'data-entity-uuid' => '',
            'data-entity-substitution' => '',
          ]);
        }
      }
    }
  }
}
