<?php

/**
 * @file
 * Contains jcc_custom.module.
 */

use Drupal\Core\Database\Database;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Field\FieldFilteredMarkup;
use Drupal\Core\Form\FormStateInterface;
use Drupal\editor\Entity\Editor;
use Drupal\file\Element\ManagedFile;
use Drupal\jcc_custom\Ajax\ManagedFileUploadCompleteEventCommand;
use Drupal\taxonomy\Entity\Term;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_page_attachments().
 */
function jcc_custom_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'jcc_custom/fontawesome';

  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute();
  if (!$is_admin) {
    $attachments['#attached']['library'][] = 'jcc_custom/filelink';
    $attachments['#attached']['library'][] = 'jcc_custom/forms';
    $attachments['#attached']['library'][] = 'jcc_custom/tableadapt';
    $attachments['#attached']['library'][] = 'jcc_custom/feedbacksurvey';
  }
}

/**
 * Implements hook_ckeditor_css_alter().
 */
function jcc_custom_ckeditor_css_alter(array &$css, Editor $editor) {
  if ($scheme = theme_get_setting('scheme', 'jcc_components')) {
    if (!$editor->hasAssociatedFilterFormat()) {
      return;
    }

    $known_formats = [
      'basic_html',
      'full_html',
      'body',
      'aside',
      'minimal',
    ];

    if (in_array($editor->getFilterFormat()->id(), $known_formats)) {
      $css[] = drupal_get_path('core', NULL) . "/../libraries/courtyard-artifact/2.x/public/css/${scheme}.css";
    }
  }
}

/**
 * Implements hook_settings_alter().
 *
 * Programmatically alter ckeditor as needed.
 * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_config.html.
 */
function jcc_custom_editor_js_settings_alter(&$settings) {
  // When no secure image filter, limit Source editing.
  // Temporary for *.courts.ca.gov images.
  // Consider later: www.drupal.org/project/drupal/issues/2257291.
  $roles = \Drupal::currentUser()->getRoles();
  if (!array_intersect(['administrator', 'manager'], $roles)) {
    foreach ($settings['editor']['formats'] as $name => $value) {
      $editor = Editor::load($name);
      if (is_object($editor)) {
        $restrict_images = $editor->getFilterFormat()->filters('filter_html_image_secure')->status;
        if (!$restrict_images) {
          $settings['editor']['formats'][$name]['editorSettings']['removeButtons'] = 'Source';
        }
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function jcc_custom_form_alter(&$form, $form_state, $form_id) {
  // The body field on these content types is only used for migration of
  // content and temporary display on the initial site build. Editors should
  // not have access.
  // The field will only render if there are no components added by paragraph
  // reference. See respective node templates.
  switch ($form_id) {
    case 'node_news_edit_form':
    case 'node_subpage_edit_form':
    case 'node_news_form':
    case 'node_subpage_form':
      $user = \Drupal::currentUser();
      $access = $user->hasPermission('access migration body');
      $form['body']['#access'] = $access;
      break;

    case 'node_document_form':
      if (isset($form['field_date_range'])) {
        $startDate = $form['field_date_range']['widget'][0]['value']['#default_value'];
        if ($startDate && $startDate instanceof DrupalDateTime) {
          $startDate->setTime(0, 0, 0);
          $form['field_date_range']['widget'][0]['value']['#default_value'] = $startDate;
          $form['field_date_range']['widget'][0]['end_value']['#default_value'] = $startDate;
        }
      }
      break;

    case 'media_library_add_form_upload':
      if (!empty($form['media'][0]['fields']['name']['widget'][0]['value']['#default_value'])) {
        $name = $form['media'][0]['fields']['name']['widget'][0]['value']['#default_value'];
        $extension = '.' . pathinfo($name, PATHINFO_EXTENSION);
        $form['media'][0]['fields']['name']['widget'][0]['value']['#default_value'] = str_replace($extension, '', $name);
      }
      break;

    case 'node_landing_page_delete_form':
      $form['description'] = [
        '#type' => 'inline_template',
        '#template' => '<h2><svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" viewBox="0 0 512 512"><title>ionicons-v5-r</title><path fill="#ce6060" d="M449.07,399.08,278.64,82.58c-12.08-22.44-44.26-22.44-56.35,0L51.87,399.08A32,32,0,0,0,80,446.25H420.89A32,32,0,0,0,449.07,399.08Zm-198.6-1.83a20,20,0,1,1,20-20A20,20,0,0,1,250.47,397.25ZM272.19,196.1l-5.74,122a16,16,0,0,1-32,0l-5.74-121.95v0a21.73,21.73,0,0,1,21.5-22.69h.21a21.74,21.74,0,0,1,21.73,22.7Z"/></svg>{{ "This action cannot be undone."|t }}</h2><p>{{ "If you would like to remove a page without deleting it, select the status <b>[Archived]</b> on the <b>Edit</b> page."|t }}</p>',
      ];

      break;

    case 'filter_format_edit_form':
      // See jcc_custom_editor_js_settings_alter why custom description.
      $form['filters']['status']['filter_html_image_secure']['#description'] = FieldFilteredMarkup::create(t('Disallows usage of &lt;img&gt; tag sources that are not hosted on this site by replacing them with a placeholder image. Disabling this setting will restrict Source editing to allowed roles.'));

      break;
  }
}

/**
 * Implements hook_sendgrid_integration_categories_alter().
 */
function jcc_custom_sendgrid_integration_categories_alter($message, $categories) {
  // Remove full site name from categories (verbose).
  $siteName = \Drupal::config('system.site')->get('name');
  if (isset($categories[0]) && $categories[0] == $siteName) {
    unset($categories[0]);
  }

  // Tag outgoing emails with the trial court site.
  $sitePath = explode('/', \Drupal::service('site.path'));
  $siteName = $sitePath[1];
  $categories[] = $siteName;

  // Also add generic TC tag.
  $categories[] = 'Trial Court';

  return $categories;
}

/**
 * Implements hook_views_data_alter().
 */
function jcc_custom_views_data_alter(array &$data) {
  // This code is related to the CSV importer.
  $data['node_field_data']['jcc_custom_date_filter'] = [
    'title' => t('Date filter'),
    'filter' => [
      'title' => t('Date filter'),
      'help' => t('Custom date filter.'),
      'field' => 'nid',
      'id' => 'jcc_custom_date_filter',
    ],
  ];
}

/**
 * Implements hook_views_query_alter().
 */
function jcc_custom_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  switch ($view->id()) {
    case 'documents':
      // Override query max for sufficient cases to display from docs.
      if (Term::load($view->args[0])->get('name')->value == 'Oral Argument') {
        $view->getPager()->setItemsPerPage(20);
      }
      break;

    case 'oral_arguments':
      if ($view->getDisplay()->display['id'] == 'block_1' && $view->args) {
        // Custom date range contextual filter.
        $query->addWhere(0, 'node__field_date_range.field_date_range_value', $view->args[0], '>=');
        $query->addWhere(0, 'node__field_date_range.field_date_range_end_value', $view->args[1], '<');
      }
      break;
  }
  // This code is related to the CSV importer.
  if ($view->id() == 'imported_events' && $view->getDisplay()->display['id'] == 'events') {
    $datetime = \Drupal::request()->query->get('dt');
    if (!empty($datetime)) {

      $utc = new \DateTimeZone("UTC");
      $newTZ = new \DateTimeZone("America/Los_Angeles");
      $date = new \DateTime($datetime, $utc);
      $date->setTimezone($newTZ);

      $entity_ids = [];
      $connection = Database::getConnection();
      $results = $connection->query("SELECT entity_id FROM {node__field_importer_date} WHERE DATE(field_importer_date_value) = '" . $date->format('Y-m-d') . "'")->fetchAll();
      foreach ($results as $row) {
        $entity_ids[] = $row->entity_id;
      }
      if (!empty($entity_ids)) {
        $query->addWhere(1, 'node_field_data.nid', $entity_ids, 'IN');
      }
    }
  }
}

/**
 * Implements hook_entity_type_alter().
 *
 * Fixes bug: TCI-731, where workflow conflicts with some paragraphs config.
 *
 * @see https://www.drupal.org/project/drupal/issues/2955321
 * @see https://www.drupal.org/project/entity_reference_revisions/issues/3150084
 */
function jcc_custom_entity_type_alter(array &$entity_types) {
  foreach ($entity_types as $entity_type) {
    $constraints = $entity_type->getConstraints();
    unset($constraints['EntityUntranslatableFields']);
    $entity_type->setConstraints($constraints);
  }
}

/**
 * Implements hook_js_settings_alter().
 *
 * @inheritdoc
 */
function jcc_custom_js_settings_alter(array &$settings, $assets) {
  $settings['user']['authenticated'] = \Drupal::currentUser()->isAuthenticated();
}

/**
 * Implements hook_element_info_alter().
 */
function jcc_custom_element_info_alter(array &$info) {
  // Add a custom #process hook to the managed_file element:
  $info['managed_file']['#process'][] = 'jcc_custom_managed_file_process';
  // Add the custom command to managed_file elements, so that it is
  // available when called:
  $info['managed_file']['#attached']['library'][] = 'jcc_custom/command.managed_file_upload_complete_event_command';
}

/**
 * Custom ajax callback for managed files.
 *
 * Overrides \Drupal\file\Element\ManagedFile::uploadAjaxCallback()
 *
 * @see \Drupal\file\Element\ManagedFile::uploadAjaxCallback
 */
function jcc_custom_managed_file_ajax_callback(array &$form, FormStateInterface $form_state) {
  // Retrieve the original response.
  $response = ManagedFile::uploadAjaxCallback($form, $form_state, \Drupal::request());

  // Add our own command to the end, so our command is run last:
  $response->addCommand(new ManagedFileUploadCompleteEventCommand());

  return $response;
}

/**
 * Custom process callback added to managed_file elements.
 *
 * Replaces the original #ajax callback with a custom one.
 */
function jcc_custom_managed_file_process(array &$element, FormStateInterface $form_state) {
  $element['upload_button']['#ajax']['callback'] = 'jcc_custom_managed_file_ajax_callback';

  return $element;
}
