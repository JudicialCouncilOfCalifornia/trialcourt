<?php

/**
 * @file
 * Contains jcc_custom.module.
 */

use Drupal\Core\Database\Database;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\editor\Entity\Editor;
use Drupal\taxonomy\Entity\Term;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;

/**
 * Implements hook_page_attachments().
 */
function jcc_custom_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'jcc_custom/fontawesome';

  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute();
  if (!$is_admin) {
    $attachments['#attached']['library'][] = 'jcc_custom/filelink';
    $attachments['#attached']['library'][] = 'jcc_custom/forms';
    $attachments['#attached']['library'][] = 'jcc_custom/tableadapt';
    $attachments['#attached']['library'][] = 'jcc_custom/feedbacksurvey';
  }
}

/**
 * Implements hook_ckeditor_css_alter().
 */
function jcc_custom_ckeditor_css_alter(array &$css, Editor $editor) {
  if ($scheme = theme_get_setting('scheme', 'jcc_components')) {
    if (!$editor->hasAssociatedFilterFormat()) {
      return;
    }

    $known_formats = [
      'basic_html',
      'full_html',
      'body',
      'aside',
      'minimal',
    ];

    if (in_array($editor->getFilterFormat()->id(), $known_formats)) {
      $css[] = drupal_get_path('core', NULL) . "/../libraries/courtyard-artifact/2.x/public/css/${scheme}.css";
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function jcc_custom_form_alter(&$form, $form_state, $form_id) {
  // The body field on these content types is only used for migration of
  // content and temporary display on the initial site build. Editors should
  // not have access.
  // The field will only render if there are no components added by paragraph
  // reference. See respective node templates.
  switch ($form_id) {
    case 'node_news_edit_form':
    case 'node_subpage_edit_form':
    case 'node_news_form':
    case 'node_subpage_form':
      $user = \Drupal::currentUser();
      $access = $user->hasPermission('access migration body');
      $form['body']['#access'] = $access;
      break;

    case 'node_document_form':
      $startDate = $form['field_date_range']['widget'][0]['value']['#default_value'];
      if ($startDate && $startDate instanceof DrupalDateTime) {
        $startDate->setTime(0, 0, 0);
        $form['field_date_range']['widget'][0]['value']['#default_value'] = $startDate;
        $form['field_date_range']['widget'][0]['end_value']['#default_value'] = $startDate;
      }
      break;
  }
}

/**
 * Implements hook_sendgrid_integration_categories_alter().
 */
function jcc_custom_sendgrid_integration_categories_alter($message, $categories) {
  // Remove full site name from categories (verbose).
  $siteName = \Drupal::config('system.site')->get('name');
  if (isset($categories[0]) && $categories[0] == $siteName) {
    unset($categories[0]);
  }

  // Tag outgoing emails with the trial court site.
  $sitePath = explode('/', \Drupal::service('site.path'));
  $siteName = $sitePath[1];
  $categories[] = $siteName;

  // Also add generic TC tag.
  $categories[] = 'Trial Court';

  return $categories;
}

/**
 * Implements hook_views_data_alter().
 */
function jcc_custom_views_data_alter(array &$data) {
  // This code is related to the CSV importer.
  $data['node_field_data']['jcc_custom_date_filter'] = [
    'title' => t('Date filter'),
    'filter' => [
      'title' => t('Date filter'),
      'help' => t('Custom date filter.'),
      'field' => 'nid',
      'id' => 'jcc_custom_date_filter',
    ],
  ];
}

/**
 * Implements hook_views_query_alter().
 */
function jcc_custom_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  switch ($view->storage->id()) {
    case 'documents':
      // Override query max for sufficient cases to display from docs.
      if (Term::load($view->args[0])->get('name')->value == 'Oral Argument') {
        $view->getPager()->setItemsPerPage(20);
      }
      break;
  }
  // This code is related to the CSV importer.
  if ($view->id() == 'imported_events' && $view->getDisplay()->display['id'] == 'events') {
    $datetime = \Drupal::request()->query->get('dt');
    if (!empty($datetime)) {

      $utc = new \DateTimeZone("UTC");
      $newTZ = new \DateTimeZone("America/Los_Angeles");
      $date = new \DateTime($datetime, $utc);
      $date->setTimezone($newTZ);

      $entity_ids = [];
      $connection = Database::getConnection();
      $results = $connection->query("SELECT entity_id FROM {node__field_importer_date} WHERE DATE(field_importer_date_value) = '" . $date->format('Y-m-d') . "'")->fetchAll();
      foreach ($results as $row) {
        $entity_ids[] = $row->entity_id;
      }
      if (!empty($entity_ids)) {
        $query->addWhere(1, 'node_field_data.nid', $entity_ids, 'IN');
      }
    }
  }
}

/**
 * Implements hook_entity_type_alter().
 *
 * Fixes bug: TCI-731, where workflow conflicts with some paragraphs config.
 *
 * @see https://www.drupal.org/project/drupal/issues/2955321
 * @see https://www.drupal.org/project/entity_reference_revisions/issues/3150084
 */
function jcc_custom_entity_type_alter(array &$entity_types) {
  foreach ($entity_types as $entity_type) {
    $constraints = $entity_type->getConstraints();
    unset($constraints['EntityUntranslatableFields']);
    $entity_type->setConstraints($constraints);
  }
}

/**
 * Implements hook_js_settings_alter().
 *
 * @inheritdoc
 */
function jcc_custom_js_settings_alter(array &$settings, $assets) {
  $settings['user']['authenticated'] = \Drupal::currentUser()->isAuthenticated();
}
