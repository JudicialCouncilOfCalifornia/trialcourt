<?php

/**
 * @file
 * Contains jcc_custom.module.
 */

use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
use Drupal\Core\Database\Database;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityForm;
use Drupal\Core\Field\FieldFilteredMarkup;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Render\Element;
use Drupal\editor\Entity\Editor;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\file\Element\ManagedFile;
use Drupal\jcc_custom\Ajax\ManagedFileUploadCompleteEventCommand;
use Drupal\taxonomy\Entity\Term;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_page_attachments().
 */
function jcc_custom_page_attachments(array &$attachments): void {
  $attachments['#attached']['library'][] = 'jcc_custom/fontawesome';
  $attachments['#attached']['library'][] = 'jcc_custom/tableadapt';
  $attachments['#attached']['library'][] = 'jcc_custom/fixautocomplete';
  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute();
  if (!$is_admin) {
    $attachments['#attached']['library'][] = 'jcc_custom/filelink';
    $attachments['#attached']['library'][] = 'jcc_custom/forms';
    $attachments['#attached']['library'][] = 'jcc_custom/feedbacksurvey';
    $attachments['#attached']['library'][] = 'jcc_custom/gin-elevated';
  }
  if ($is_admin) {
    // Override the layout paragraphs styling.
    // 2.0 styling is drab and hard to use.
    $attachments['#attached']['library'][] = 'jcc_custom/admin_layout_paragraphs_edit_override';
    $attachments['#attached']['library'][] = 'jcc_custom/gin-admin-elevated';
  }
}

/**
 * Implements hook_ckeditor_css_alter().
 */
function jcc_custom_ckeditor_css_alter(array &$css, Editor $editor) {
  $theme_handler = \Drupal::service('theme_handler');

  $known_formats = [
    'basic_html',
    'full_html',
    'body',
    'aside',
    'minimal',
  ];

  if (jcc_custom_is_elevated_site() && in_array($editor->getFilterFormat()->id(), $known_formats)) {
    if (!$editor->hasAssociatedFilterFormat()) {
      return;
    }

    $css[] = "/themes/contrib/jcc_storybook/lib/css/scheme-default.css";
    $css[] = "/themes/contrib/jcc_storybook/lib/css/elements.css";
    // For paragraphs embedded as ckeditor content.
    if ($editor->getFilterFormat()->id() == 'body') {
      $css[] = "/themes/contrib/jcc_storybook/lib/stories/Atoms/Button/Button.css";
      $css[] = "/themes/contrib/jcc_storybook/lib/stories/Molecules/ReadMore/ReadMore.css";
    }
  }
  else {
    if ($scheme = theme_get_setting('scheme', $theme_handler->getDefault())) {
      if (!$editor->hasAssociatedFilterFormat()) {
        return;
      }

      if (in_array($editor->getFilterFormat()->id(), $known_formats)) {
        $css[] = "/libraries/courtyard-artifact/2.x/public/css/${scheme}.css";
      }
    }
  }
}

/**
 * Implements hook_settings_alter().
 *
 * Programmatically alter ckeditor as needed.
 * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_config.html.
 */
function jcc_custom_editor_js_settings_alter(&$settings) {
  // When no secure image filter, limit Source editing.
  // Temporary for *.courts.ca.gov images.
  // Consider later: www.drupal.org/project/drupal/issues/2257291.
  $roles = \Drupal::currentUser()->getRoles();
  if (!array_intersect(['administrator', 'manager'], $roles)) {
    foreach ($settings['editor']['formats'] as $name => $value) {
      $editor = Editor::load($name);
      if (is_object($editor)) {
        $restrict_images = $editor->getFilterFormat()->filters('filter_html_image_secure')->status;
        if (!$restrict_images) {
          $settings['editor']['formats'][$name]['editorSettings']['removeButtons'] = 'Source';
        }
      }
    }
  }
}

/**
 * Implements hook_node_prepare_form().
 */
function jcc_custom_node_prepare_form($node, $form_id, $form) {
  $theme = \Drupal::config('system.theme')->get('default');
  // Set default elevated components programmatically.
  if ($theme == 'jcc_elevated') {
    switch ($node->getType()) {
      case 'landing_page':
      case 'subpage':
        if ($node->isNew() === TRUE) {
          $components_field = $node->get('field_components');
          $entity = 'paragraph';

          // Preload hero.
          $hero = Drupal::service('entity_type.manager')->getStorage($entity)->create(['type' => 'hero_hangover']);
          $components_field->appendItem($hero);
          // Preload layout section.
          $section = Drupal::service('entity_type.manager')->getStorage($entity)->create(['type' => 'section']);
          $components_field->appendItem($section);
        }
        break;
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function jcc_custom_form_alter(&$form, $form_state, $form_id) {
  $theme = \Drupal::config('system.theme')->get('default');

  // The body field on these content types is only used for migration of
  // content and temporary display on the initial site build. Editors should
  // not have access.
  // The field will only render if there are no components added by paragraph
  // reference. See respective node templates.
  switch ($form_id) {
    case 'node_landing_page_edit_form':
    case 'node_landing_page_form':
    case 'node_subpage_edit_form':
    case 'node_subpage_form':
      $user = \Drupal::currentUser();
      $access = $user->hasPermission('access migration body');
      $form['body']['#access'] = $access;

      // Suppress components that are usable to elevated sites only.
      if ($theme != 'jcc_elevated') {
        unset($form['field_components']['widget']['add_more']['add_more_button_hero_mega']);
        unset($form['field_components']['widget']['add_more']['add_more_button_hero_hangover']);
        unset($form['field_components']['widget']['add_more']['add_more_button_section']);
        unset($form['field_components']['widget']['add_more']['add_more_button_tabs']);
        unset($form['field_components']['widget']['add_more']['add_more_button_find_my_court_embed']);
        unset($form['field_components']['widget']["add_more"]['add_more_button_granicus_events']);
      }
      else {
        unset($form['field_components']['widget']["add_more"]['add_more_button_content_stream']);
      }

      break;

    case 'node_news_edit_form':
    case 'node_news_form':
      if (!jcc_custom_is_elevated_site()) {
        unset($form['field_node_reference']);
        unset($form['field_media_file_multiple']);
        unset($form['field_media']);
      }
      else {
        unset($form['field_components']);
        if (isset($form['body'])) {
          $form['body']['widget'][0]['#description'] = '';
        }
      }
      break;

    case 'node_document_form':
      if (isset($form['field_date_range'])) {
        $startDate = $form['field_date_range']['widget'][0]['value']['#default_value'];
        if ($startDate && $startDate instanceof DrupalDateTime) {
          $startDate->setTime(0, 0, 0);
          $form['field_date_range']['widget'][0]['value']['#default_value'] = $startDate;
          $form['field_date_range']['widget'][0]['end_value']['#default_value'] = $startDate;
        }
      }
      break;

    case 'media_library_add_form_upload':
      if (!empty($form['media'][0]['fields']['name']['widget'][0]['value']['#default_value'])) {
        $name = $form['media'][0]['fields']['name']['widget'][0]['value']['#default_value'];
        $extension = '.' . pathinfo($name, PATHINFO_EXTENSION);
        $form['media'][0]['fields']['name']['widget'][0]['value']['#default_value'] = str_replace($extension, '', $name);
      }
      break;

    case 'node_alert_delete_form':
    case 'node_case_delete_form':
    case 'node_custom_email_delete_form':
    case 'node_document_delete_form':
    case 'node_importer_delete_form':
    case 'node_job_delete_form':
    case 'node_judge_delete_form':
    case 'node_landing_page_delete_form':
    case 'node_location_delete_form':
    case 'node_news_delete_form':
    case 'node_subpage_delete_form':
    case 'node_tentative_ruling_delete_form':
      $form['description'] = [
        '#type' => 'inline_template',
        '#template' => '<h2><svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" viewBox="0 0 512 512"><title>ionicons-v5-r</title><path fill="#ce6060" d="M449.07,399.08,278.64,82.58c-12.08-22.44-44.26-22.44-56.35,0L51.87,399.08A32,32,0,0,0,80,446.25H420.89A32,32,0,0,0,449.07,399.08Zm-198.6-1.83a20,20,0,1,1,20-20A20,20,0,0,1,250.47,397.25ZM272.19,196.1l-5.74,122a16,16,0,0,1-32,0l-5.74-121.95v0a21.73,21.73,0,0,1,21.5-22.69h.21a21.74,21.74,0,0,1,21.73,22.7Z"/></svg>{{ "This action cannot be undone."|t }}</h2><p>{{ "If you would like to remove a page without deleting it, select the status <b>[Archived]</b> on the <b>Edit</b> page."|t }}</p>',
      ];

      break;

    case 'filter_format_edit_form':
      // See jcc_custom_editor_js_settings_alter why custom description.
      $form['filters']['status']['filter_html_image_secure']['#description'] = FieldFilteredMarkup::create(t('Disallows usage of &lt;img&gt; tag sources that are not hosted on this site by replacing them with a placeholder image. Disabling this setting will restrict Source editing to allowed roles.'));

      break;

    case 'node_judge_form':
    case 'node_judge_edit_form':
      if (jcc_custom_is_elevated_site()) {
        unset($form['field_address']);
      }
      else {
        unset($form['field_location']);
      }
      break;

    case 'node_request_form':
    case 'node_request_edit_form':
      // If the module that adds functionality to solicitations is no active,
      // then disable the ability to create nodes by disabling the form.
      $moduleHandler = \Drupal::service('module_handler');
      if (!$moduleHandler->moduleExists('jcc_elevated_rfp_solicitations')) {
        // Set all form items to false access.
        foreach (Element::children($form) as $name) {
          $form[$name]['#access'] = FALSE;
        }
        // Alert the viewer that this node type cannot be created.
        $form['content_information'] = [
          '#markup' => t('Content of this type is not allowed to be created on this site. Please contact an administrator for more information.'),
        ];
      }
      break;

    case 'paragraphs_library_item_edit_form':
    case 'paragraphs_library_item_edit_form_1':
      $type = \Drupal::request()->get('type');
      $isNew = $form_state->getFormObject()->getEntity()->isNew();
      $form['paragraphs']['widget']['#title'] = t('Preset item');

      // If new/add form and no type is set by the URL, Block the page/form.
      if (!$type && $isNew) {
        $form['paragraphs']['#access'] = FALSE;
        $form['label']['#access'] = FALSE;
        $form['revision_log']['#access'] = FALSE;
        $form['actions']['#access'] = FALSE;
        $form['notice']['#markup'] = t('This form is blocked because a type is not defined in the URL');
      }

      // If new/add form and type is set by the URL, limit the options to the
      // type that is set in the URL. If the type is not correct, this also acts
      // as a way to prevent non-allowed types to be added.
      if ($type && $isNew) {
        foreach ($form['paragraphs']['widget']['add_more'] as $key => $item) {
          if (str_starts_with($key, 'add_more_button_') && $key != 'add_more_button_' . $type) {
            unset($form['paragraphs']['widget']['add_more'][$key]);
            unset($form['paragraphs']['widget']['add_more']['operations']['#links'][$key]);
          }
        }
      }

      break;

    case 'media_publication_add_form':
    case 'media_publication_edit_form':
      // Collapse publication primary file variants field by default.
      $form['field_media_file_multiple']['widget']['#open'] = FALSE;
      break;
  }

  if (strpos($form_id, 'node_form') === 0) {
    // Get the node type from the form ID.
    $node_type = substr($form_id, strlen('node_form_'));
    // Check if the user is not an administrator.
    if (!\Drupal::currentUser()->hasPermission('administer site configuration')) {
      // Replace 'your_field_machine_name' with the machine name of the field
      // you want to restrict access to.
      if (isset($form['field_e'][$node_type]['#access'])) {
        $form['field_e'][$node_type]['#access'] = FALSE;
      }
    }
  }
}

/**
 * Implements hook_field_group_form_process_alter().
 */
function jcc_custom_field_group_form_process_alter(array &$element, &$group, &$complete_form) {
  if (jcc_custom_is_elevated_site()) {
    switch ($group->group_name) {
      case 'group_media':
        if ($group->bundle == 'card') {
          $element['#description'] = t('Embed an image or remote video. The media will automatically shift top or left positioning if the real estate is large enough. Optionally, you can position the media on the right.');
        }
        break;

      case 'group_button':
        if ($group->bundle == 'card') {
          $element['#title'] = 'Add Buttons or Entire Card Clickable';
          $linking_help = t('Setup a link for a button to appear as part of the card content or for the entire card. Use the <strong>Entire Card Clickable</strong> option to make the whole card actionable.\r\n\r\nFor additional buttons if supported, use the <strong>Additional Links</strong> option but be mindful of usability when offering more than two buttons.');
          $element['#description'] = $linking_help;
        }
        break;
    }
  }
}

/**
 * Implements hook_field_widget_single_element_WIDGET_TYPE_form_alter().
 */
function jcc_custom_field_widget_single_element_entity_reference_paragraphs_form_alter(&$element, FormStateInterface $form_state, $context) {
  $theme = \Drupal::config('system.theme')->get('default');
  // If elevated theme is not in use by all sites.
  if ($theme == 'jcc_elevated') {
    $element['#attached']['library'][] = 'jcc_custom/gin-elevated';

    switch ($element['#paragraph_type']) {
      case 'hero':
        unset($element['subform']['field_subheading']);
        unset($element['subform']['field_link']);
        unset($element['subform']['field_aside']);

        // Attach Card.css for background swatches.
        $element['#attached']['library'][] = 'jcc_custom/storybook-scheme-default';
        $element['#attached']['library'][] = 'jcc_custom/storybook-layout';
        $element['#attached']['library'][] = 'jcc_custom/storybook-card';
        break;

      case 'hero_mega':
      case 'hero_hangover':
      case 'section':
        // Attach Card.css for background swatches.
        $element['#attached']['library'][] = 'jcc_custom/storybook-scheme-default';
        $element['#attached']['library'][] = 'jcc_custom/storybook-layout';
        $element['#attached']['library'][] = 'jcc_custom/storybook-card';
        break;

      case 'card':
      case 'hero_banner':
        unset($element['subform']['field_brow']);
        break;

      case 'cards':
        unset($element['subform']['field_variant']);
        unset($element['subform']['field_columns']);

        // Attach Card.css for background swatches.
        $element['#attached']['library'][] = 'jcc_custom/storybook-scheme-default';
        $element['#attached']['library'][] = 'jcc_custom/storybook-layout';
        $element['#attached']['library'][] = 'jcc_custom/storybook-card';
        break;
    }
  }
  else {
    switch ($element['#paragraph_type']) {
      case 'hero':
        unset($element['subform']['field_components']);
        unset($element['subform']['field_image_media']);
        unset($element['subform']['field_background']);
        break;

      case 'cards':
        unset($element['subform']['field_width_minimum']);
        unset($element['subform']['field_image_media']);
        break;

      case 'card':
        unset($element['subform']['field_media_alignment']);
        unset($element['subform']['field_background']);
        unset($element['subform']['field_link_multiple']);
        if ($theme != 'jcc_professional') {
          unset($element['subform']['field_icon']);
          unset($element['subform']['field_entire_card_clickable']);
        }
        break;
    }
  }
}

/**
 * Implements hook_preprocess_views_view() for global use.
 */
function jcc_custom_preprocess_views_view(&$variables) {
  $views_reference = $variables['view']->element['#viewsreference']['parent_entity_type'] ?? '';

  // Suppress exposed view filters from node edit preview.
  if ($variables['theme_hook_original'] === 'views_view' && $views_reference === 'paragraph') {
    $variables['exposed'] = [];
  }
}

/**
 * Implements hook_sendgrid_integration_categories_alter().
 */
function jcc_custom_sendgrid_integration_categories_alter($message, $categories) {
  // Remove full site name from categories (verbose).
  $siteName = \Drupal::config('system.site')->get('name');
  if (isset($categories[0]) && $categories[0] == $siteName) {
    unset($categories[0]);
  }

  // Tag outgoing emails with the trial court site.
  $sitePath = explode('/', \Drupal::service('site.path'));
  $siteName = $sitePath[1];
  $categories[] = $siteName;

  // Also add generic TC tag.
  $categories[] = 'Trial Court';

  return $categories;
}

/**
 * Implements hook_views_data_alter().
 */
function jcc_custom_views_data_alter(array &$data) {
  // This code is related to the CSV importer.
  $data['node_field_data']['jcc_custom_date_filter'] = [
    'title' => t('Date filter'),
    'filter' => [
      'title' => t('Date filter'),
      'help' => t('Custom date filter.'),
      'field' => 'nid',
      'id' => 'jcc_custom_date_filter',
    ],
  ];
}

/**
 * Implements hook_views_query_alter().
 */
function jcc_custom_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  switch ($view->id()) {
    case 'documents':
      // Override query max for sufficient cases to display from docs.
      if (Term::load($view->args[0])->get('name')->value == 'Oral Argument') {
        $view->getPager()->setItemsPerPage(20);
      }
      break;

    case 'oral_arguments':
      if ($view->getDisplay()->display['id'] == 'block_1' && $view->args) {
        // Custom date range contextual filter.
        $query->addWhere(0, 'node__field_date_range.field_date_range_value', $view->args[0], '>=');
        $query->addWhere(0, 'node__field_date_range.field_date_range_end_value', $view->args[1], '<');
      }
      break;
  }
  // This code is related to the CSV importer.
  if ($view->id() == 'imported_events' && $view->getDisplay()->display['id'] == 'events') {
    $datetime = \Drupal::request()->query->get('dt');
    if (!empty($datetime)) {

      $utc = new \DateTimeZone("UTC");
      $newTZ = new \DateTimeZone("America/Los_Angeles");
      $date = new \DateTime($datetime, $utc);
      $date->setTimezone($newTZ);

      $entity_ids = [];
      $connection = Database::getConnection();
      $results = $connection->query("SELECT entity_id FROM {node__field_importer_date} WHERE DATE(field_importer_date_value) = '" . $date->format('Y-m-d') . "'")->fetchAll();
      foreach ($results as $row) {
        $entity_ids[] = $row->entity_id;
      }
      if (!empty($entity_ids)) {
        $query->addWhere(1, 'node_field_data.nid', $entity_ids, 'IN');
      }
    }
  }
}

/**
 * Implements hook_entity_type_alter().
 *
 * Fixes bug: TCI-731, where workflow conflicts with some paragraphs config.
 *
 * @see https://www.drupal.org/project/drupal/issues/2955321
 * @see https://www.drupal.org/project/entity_reference_revisions/issues/3150084
 */
function jcc_custom_entity_type_alter(array &$entity_types) {
  foreach ($entity_types as $entity_type) {
    $constraints = $entity_type->getConstraints();
    unset($constraints['EntityUntranslatableFields']);
    $entity_type->setConstraints($constraints);
  }
}

/**
 * Implements hook_js_settings_alter().
 *
 * @inheritdoc
 */
function jcc_custom_js_settings_alter(array &$settings, $assets) {
  $settings['user']['authenticated'] = \Drupal::currentUser()->isAuthenticated();
}

/**
 * Implements hook_element_info_alter().
 */
function jcc_custom_element_info_alter(array &$info) {
  // Add a custom #process hook to the managed_file element:
  $info['managed_file']['#process'][] = 'jcc_custom_managed_file_process';
  // Add the custom command to managed_file elements, so that it is
  // available when called:
  $info['managed_file']['#attached']['library'][] = 'jcc_custom/command.managed_file_upload_complete_event_command';
}

/**
 * Custom ajax callback for managed files.
 *
 * Overrides \Drupal\file\Element\ManagedFile::uploadAjaxCallback()
 *
 * @see \Drupal\file\Element\ManagedFile::uploadAjaxCallback
 */
function jcc_custom_managed_file_ajax_callback(array &$form, FormStateInterface $form_state) {
  // Retrieve the original response.
  $response = ManagedFile::uploadAjaxCallback($form, $form_state, \Drupal::request());

  // Add our own command to the end, so our command is run last:
  $response->addCommand(new ManagedFileUploadCompleteEventCommand());

  return $response;
}

/**
 * Custom process callback added to managed_file elements.
 *
 * Replaces the original #ajax callback with a custom one.
 */
function jcc_custom_managed_file_process(array &$element, FormStateInterface $form_state) {
  $element['upload_button']['#ajax']['callback'] = 'jcc_custom_managed_file_ajax_callback';

  return $element;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function jcc_custom_preprocess_views_view_row_rss(&$variables) {
  $view = $variables['view'];
  $view_id = $view->id();
  if ($view_id == 'news_types') {
    // Extending RSS content.
    $item = $variables['row'];
    foreach ($item->elements as $element) {
      if ($element['key'] == 'pubDate') {
        $variables['pubDate'] = $element['value']->__toString();
      }
      if ($element['key'] == 'dc:creator') {
        $variables['category'] = $element['value'];
      }
    }
  }
  if ($view_id == 'taxanomy_rss') {
    // Extending RSS content.
    $item = $variables['row'];
    foreach ($item->elements as $element) {
      if ($element['key'] == 'pubDate') {
        $variables['pubDate'] = $element['value'];
      }
      if ($element['key'] == 'dc:creator') {
        $variables['category'] = $element['value'];
      }
    }
  }
}

/**
 * Set dynamic allowed values for the bundle field.
 *
 * @param \Drupal\field\Entity\FieldStorageConfig $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function jcc_custom_background_options_bundle(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable): array {
  // Load overlay theme options into select field.
  $options = [];
  $file = file_get_contents(\Drupal::service('extension.list.theme')->getPath('jcc_elevated') . '/jcc-background-options.json');
  if ($file) {
    $overlays = json_decode($file);
    foreach ($overlays as $style) {
      foreach ($style as $key => $overlay) {
        $options[] = [$key => $overlay];
      }
    }
  }

  return $options;
}

/**
 * Set dynamic default value for the section background bundle field.
 */
function jcc_custom_section_background_options_bundle(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable): array {
  return [
    "base-light-xxx" => "<span class=\"cluster\"><span>Base Lightest</span><span class=\"card card--default card--background-base-light-xxx\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>",
    "base-dark-x" => "<span class=\"cluster\"><span>Base Darker</span><span class=\"card card--default card--background-base-dark-x\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>",
    "base-dark-xxx" => "<span class=\"cluster\"><span>Base Darkest</span><span class=\"card card--default card--background-base-dark-xxx\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>",
    "accent-warm-light-xxxx" => "<span class=\"cluster\"><span>Accent Warm Lightest</span><span class=\"card card--default card--background-accent-warm-light-xxxx\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>",
    "accent-warm-dark-x" => "<span class=\"cluster\"><span>Accent Warm Dark</span><span class=\"card card--default card--background-accent-warm-dark-x\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>",
    "red" => "<span class=\"cluster\"><span>Accent Warm Darker</span><span class=\"card card--default card--background-red\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>",
    "brown" => "<span class=\"cluster\"><span>Accent Warm Darkest</span><span class=\"card card--default card--background-brown\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>",
    "primary-light-xxx" => "<span class=\"cluster\"><span>Primary Lightest</span><span class=\"card card--default card--background-primary-light-xxx\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>",
    "primary-light-x" => "<span class=\"cluster\"><span>Primary Vivid</span><span class=\"card card--default card--background-primary-light-x\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>",
    "primary-dark-x" => "<span class=\"cluster\"><span>Primary Dark</span><span class=\"card card--default card--background-primary-dark-x\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>",
    "primary-dark-xxx" => "<span class=\"cluster\"><span>Primary Darkest</span><span class=\"card card--default card--background-primary-dark-xxx\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>",
    "secondary" => "<span class=\"cluster\"><span>Secondary</span><span class=\"card card--default card--background-secondary\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>",
    "secondary-dark-x" => "<span class=\"cluster\"><span>Secondary Dark</span><span class=\"card card--default card--background-secondary-dark-x\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>",
  ];
}

/**
 * Set dynamic allowed values for the section layout bundle field.
 */
function jcc_custom_sub_component_layout_options_bundle(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable): array {
  return [
    'stack' => 'Stack content (Default)',
    'center' => 'Center content',
    'switcher' => 'Switcher',
    'cluster' => 'Cluster (inline)',
    'grid' => 'Grid',
    'reel' => 'Reel',
    'with-sidebar' => 'With sidebar',
    'flex flex--75-25' => '25% sidebar',
    'flex flex--70-30' => '30% sidebar',
    'flex flex--60-40' => '40% sidebar',
  ];
}

/**
 * Set dynamic allowed values for the alignment bundle field.
 */
function jcc_custom_alignment_options_bundle(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable): array {
  return [
    'flex-start' => 'flex-start',
    'center' => 'center',
    'flex-end' => 'flex-end',
  ];
}

/**
 * Set dynamic allowed values for the gap width size bundle field.
 */
function jcc_custom_gap_size_options_bundle(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable): array {
  return [
    '--s0' => '18px:Default (--s-0)',
    '--s-3' => '9px (--s-1)',
    '--s-2' => '11px (--s-2)',
    '--s-1' => '14px (--s-3)',
    '--s1' => '23px (--s1)',
    '--s2' => '28px (--s2)',
    '--s3' => '36px (--s3)',
    '--s4' => '45px (--s4)',
    '--s5' => '57px (--s5)',
    '--s6' => '72px (--s6)',
  ];
}

/**
 * Set dynamic allowed values for the sidebar direction bundle field.
 */
function jcc_custom_sidebar_direction_options_bundle(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable): array {
  return [
    'row' => 'Sidebar on left',
    'row-reverse' => 'Sidebar on right',
  ];
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function jcc_custom_field_widget_entity_reference_paragraphs_form_alter(&$element, &$form_state, $context) {
  if ($element['#paragraph_type'] == 'section') {

    // Set string of subform parents array, for use in form states settings.
    if (isset($element['subform']['#parents'])) {
      $parents_array = $element['subform']['#parents'];
      $parents = array_shift($parents_array) . '[' . implode('][', $parents_array) . ']';
      $key = ':input[name="' . $parents . '[field_sub_component_layout]"]';

      // Set visibility on style fields depending on value of Layout field.
      $element['subform']['field_grid_min_width']['#states'] = [
        'visible' => [
          $key => ['value' => (string) 'grid'],
        ],
      ];
      $element['subform']['field_measure']['#states'] = [
        'visible' => [
          [$key => ['value' => (string) 'center']],
          'or',
          [$key => ['value' => (string) 'switcher']],
        ],
      ];
      $element['subform']['field_sidebar_direction']['#states'] = [
        'visible' => [
          $key => ['value' => (string) 'with-sidebar'],
        ],
      ];
      $element['subform']['field_sidebar_width']['#states'] = [
        'visible' => [
          $key => ['value' => (string) 'with-sidebar'],
        ],
      ];
      $element['subform']['field_alignment']['#states'] = [
        'visible' => [
          [$key => ['value' => (string) 'with-sidebar']],
          'or',
          [$key => ['value' => (string) 'flex flex--75-25']],
          'or',
          [$key => ['value' => (string) 'flex flex--70-30']],
          'or',
          [$key => ['value' => (string) 'flex flex--60-40']],
          'or',
          [$key => ['value' => (string) 'switcher']],
          'or',
          [$key => ['value' => (string) 'grid']],
          'or',
          [$key => ['value' => (string) 'reel']],
        ],
      ];
      $element['subform']['field_gap_size']['#states'] = [
        'visible' => [
          [$key => ['value' => (string) 'with-sidebar']],
          'or',
          [$key => ['value' => (string) 'flex flex--75-25']],
          'or',
          [$key => ['value' => (string) 'flex flex--70-30']],
          'or',
          [$key => ['value' => (string) 'flex flex--60-40']],
          'or',
          [$key => ['value' => (string) 'switcher']],
          'or',
          [$key => ['value' => (string) 'grid']],
          'or',
          [$key => ['value' => (string) 'reel']],
          'or',
          [$key => ['value' => (string) 'center']],
          'or',
          [$key => ['value' => (string) 'cluster']],
          'or',
          [$key => ['value' => (string) 'stack']],
        ],
      ];
    }
  }
}

/**
 * Helper function to build a storybook compatible menu tree.
 */
function jcc_custom_build_menu_tree(array $tree): array {
  $items = [];
  foreach ($tree as $menu_data) {
    if (!empty($menu_data['url'])) {
      $items[] = [
        'title' => $menu_data['title'],
        'url' => !empty($menu_data['url']) ? $menu_data['url'] : '',
        'attributes' => !empty($menu_data['attributes']) ? $menu_data['attributes']->toArray() : [],
        'active' => $menu_data['in_active_trail'],
        'links' => $menu_data['below'] && $menu_data['in_active_trail'] ? jcc_custom_build_menu_tree($menu_data['below']) : [],
      ];
    }
  }

  return $items;

}

/**
 * Helper function to determine if site uses the elevated theme.
 */
function jcc_custom_is_elevated_site(): bool {
  return \Drupal::config('system.theme')->get('default') == 'jcc_elevated';
}

/**
 * Implements hook_field_widget_form_alter().
 *
 * Overriding the selection handler for redirect entity type.
 */
function jcc_custom_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  /** @var \Drupal\Core\Entity\EntityForm $form_object */
  if ($form_state->getBuildInfo()['form_id'] == 'redirect_redirect_form') {
    $form_object = $form_state->getFormObject();

    if ($form_object instanceof EntityForm) {
      $entity = $form_object->getEntity();
      if ($entity->getEntityTypeId() == 'redirect') {
        if (isset($context['widget'])) {
          $type = get_class($context['widget']);
          if (in_array($type, ['Drupal\linkit_field\Plugin\Field\FieldWidget\LinkitWidget',
            'Drupal\link\Plugin\Field\FieldWidget\LinkWidget',
          ])) {
            $element['uri']['#selection_handler'] = 'jcc_custom:node';
          }
        }
      }
    }

  }
}

/**
 * Implements hook_theme_suggestions_details_alter().
 */
function jcc_custom_theme_suggestions_details_alter(array &$suggestions, array $variables, $hook) {
  if (isset($variables['element']['#id'])) {
    $suggestions[] = $hook . '__' . str_replace('-', '_', $variables['element']['#id']);
  }
}

/**
 * Implements hook_theme_suggestions_select_alter().
 */
function jcc_custom_theme_suggestions_select_alter(array &$suggestions, array $variables, $hook) {
  if (isset($variables['element']['#id'])) {
    $suggestions[] = $hook . '__' . str_replace('-', '_', $variables['element']['#id']);
  }
}

/**
 * Implements hook_theme().
 */
function jcc_custom_theme($existing, $type, $theme, $path) {
  // Override elevated admin theme templates.
  if (jcc_custom_is_elevated_site()) {
    return [
      'details__edit_menu' => [
        'base hook' => 'details',
      ],
      'select__edit_menu_menu_parent' => [
        'base hook' => 'select',
      ],
    ];
  }
}

/**
 * Implements hook_preprocess_details().
 */
function jcc_custom_preprocess_details(&$variables): void {
  // Elements for menu settings if first level and not allowed.
  if (jcc_custom_is_elevated_site() && \Drupal::routeMatch()->getParameter('node')) {
    if ($variables['title'] && !is_array($variables['title']) && $variables['title'] == 'Menu settings') {
      $enabled = $variables['element']['enabled']['#default_value'];
      $node = \Drupal::routeMatch()->getParameter('node');
      $url_alias = $node->toUrl()->toString();
      $menu_level = substr_count($url_alias, '/');
      $roles = \Drupal::currentUser()->getRoles();
      $is_allowed = in_array('administrator', $roles);
      if ($menu_level == 1 && !$is_allowed) {
        // Menu title.
        $title_label_exp = '/<label(?:.*?)for=\"edit-menu-title\"(?:.*)>([^"]+)<\/.*>/';
        preg_match($title_label_exp, $variables['children'], $title_label);
        $title_val_exp = '/<input(?:.*?)id=\"edit-menu-title\"(?:.*)value=\"([^"]+).*/';
        preg_match($title_val_exp, $variables['children'], $title_value);

        // Menu description.
        $desc_label_exp = '/<label(?:.*?)for=\"edit-menu-description\"(?:.*)>([^"]+)<\/.*>/';
        preg_match($desc_label_exp, $variables['children'], $description_label);
        $desc_value_exp = '/<input(?:.*?)id=\"edit-menu-description\"(?:.*)value=\"([^"]+).*/';
        preg_match($desc_value_exp, $variables['children'], $description_value);

        // Menu parent.
        $parent_label_exp = '/<label(?:.*?)for=\"edit-menu-menu-parent\"(?:.*)>([^"]+)<\/.*>/';
        preg_match($parent_label_exp, $variables['children'], $parent_label);
        $parent_value_exp = '/<option(?:.*?)selected(?:.*?)>([^"]+)<\/option>/';
        preg_match($parent_value_exp, $variables['children'], $parent_value);
        $parent_value = preg_replace('/&#?[a-z0-9]{2,8};/', '', $parent_value[1]);

        // Menu weight.
        $weight_label_exp = '/<label(?:.*?)for=\"edit-menu-weight\"(?:.*)>([^"]+)<\/.*>/';
        preg_match($weight_label_exp, $variables['children'], $weight_label);
        $weight_value_exp = '/<input(?:.*?)id=\"edit-menu-weight\"(?:.*)value=\"([^"]+).*/';
        preg_match($weight_value_exp, $variables['children'], $weight_value);

        // Readonly menu details.
        $variables['readonly'] = [
          'menu_title' => [
            'label' => $title_label[1],
            'value' => $title_value[1] ?? '(Not set)',
          ],
          'menu_description' => [
            'label' => $description_label[1],
            'value' => $description_value[1] ?? '(Not set)',
          ],
          'menu_parent' => [
            'label' => $parent_label[1],
            'value' => $enabled ? $parent_value : '(Not set)',
          ],
          'menu_weight' => [
            'label' => $weight_label[1],
            'value' => $enabled ? $weight_value[1] : '(Not set)',
          ],
        ];

        // Flags and attributes to visibly hide settings.
        $variables['is_not_allowed'] = TRUE;
        $variables['attributes']['aria-hidden'] = 'true';
      }
    }
  }
}

/**
 * Implements hook_preprocess_select().
 */
function jcc_custom_preprocess_select__edit_menu_menu_parent(&$variables): void {
  // Flags to restrict 'Main navigation' (first level) selection.
  if (jcc_custom_is_elevated_site()) {
    $roles = \Drupal::currentUser()->getRoles();
    $is_allowed = in_array('administrator', $roles);
    $variables['is_allowed'] = $is_allowed;
    if (\Drupal::routeMatch()->getParameter('node')) {
      $node = \Drupal::routeMatch()->getParameter('node');
      $url_alias = $node->toUrl()->toString();
      $menu_level = substr_count($url_alias, '/');
      $variables['menu_level'] = $menu_level;
    }
    else {
      // Flag create mode.
      $variables['create_mode'] = TRUE;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function jcc_custom_form_taxonomy_overview_vocabularies_alter(&$form, FormStateInterface $form_state): void {
  // Hide the "JCC Sections" vocabulary from Vocab if "jcc_elevated_sections"
  // module is not enabled. Since the vocab config must be in the immutable
  // feature, this will at least hide it for all sites that are not using the
  // "JCC Sections" functionality.
  $moduleHandler = \Drupal::service('module_handler');
  if (!$moduleHandler->moduleExists('jcc_elevated_sections')) {
    unset($form['vocabularies']['jcc_sections']);
  }

}

/**
 * Sets the Solicitation Request (RFP) type options.
 */
function jcc_custom_request_rfp_type_options(): array {
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('jcc_elevated_rfp_solicitations')) {
    return jcc_elevated_rfp_solicitations_type_options();
  }

  return [];
}

/**
 * Sets the Solicitation Request (RFP) status options.
 */
function jcc_custom_request_rfp_status_options(): array {
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('jcc_elevated_rfp_solicitations')) {
    return jcc_elevated_rfp_solicitations_status_options();
  }

  return [
    'open' => t('Open'),
    'archived' => t('Archived'),
  ];
}

/**
 * Sets the Solicitation Request (RFP) status options.
 */
function jcc_custom_request_rfp_department_options(): array {
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('jcc_elevated_rfp_solicitations')) {
    return jcc_elevated_rfp_solicitations_department_options();
  }

  return [];
}

/**
 * Sets the Solicitation Request (RFP) status options.
 */
function jcc_custom_request_rfp_year_options(): array {
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('jcc_elevated_rfp_solicitations')) {
    return jcc_elevated_rfp_solicitations_year_options();
  }

  return [];
}

/**
 * Implements hook_menu_links_discovered_alter().
 */
function jcc_custom_menu_links_discovered_alter(&$links): void {
  // Hide the default paragraph library menu link. It's just confusing, and we
  // won't be relying on the default view. We are going to break the view apart
  // Into several custom views for each needed library.
  if (isset($links['paragraphs_library.paragraphs_library_item.collection'])) {
    unset($links['paragraphs_library.paragraphs_library_item.collection']);
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function jcc_custom_menu_local_tasks_alter(&$data, $route_name, RefinableCacheableDependencyInterface &$cacheability): void {
  // Hide default paragraph library tab that comes with the contrib module. It's
  // too general, and we will have specific admin pages for specific paragraph
  // libraries.
  if (isset($data['tabs'], $data['tabs'][0], $data['tabs'][0]['entity.paragraphs_library_item.collection'])) {
    unset($data['tabs'][0]['entity.paragraphs_library_item.collection']);
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function jcc_custom_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id): void {
  // Make sure the "publish on" date has the time widget enabled and helpful
  // descriptions are set.
  if (isset($form['publish_on'])) {
    $form['publish_on']['widget'][0]['value']['#date_time_element'] = 'time';
    $form['publish_on']['widget'][0]['value']['#date_date_element'] = 'date';
    $form['publish_on']['widget'][0]['value']['#date_time_format'] = 'H:i';
    $form['publish_on']['widget'][0]['value']['#date_increment'] = '60';
  }
  if (isset($form['publish_state'])) {
    $form['publish_state']['widget'][0]['#description'] = t('When the "Publish on" time hits, the latest revision of this page will change to the state defined here.');
  }

  // Make sure the "unpublish on" date has the time widget enabled and helpful
  // descriptions are set.
  if (isset($form['unpublish_on'])) {
    $form['unpublish_on']['widget'][0]['value']['#date_time_element'] = 'time';
    $form['unpublish_on']['widget'][0]['value']['#date_date_element'] = 'date';
    $form['unpublish_on']['widget'][0]['value']['#date_time_format'] = 'H:i';
    $form['unpublish_on']['widget'][0]['value']['#date_increment'] = '60';
  }
  if (isset($form['unpublish_state'])) {
    $form['unpublish_state']['widget'][0]['#description'] = t('When the "Unpublish on" time hits, this page will change to the state defined here.');
  }
}

/**
 * Implements hook_token_info().
 */
function jcc_custom_token_info() {
  $type = [
    'name' => t('JCC Custom'),
    'description' => t('JCC Custom Tokens.'),
  ];
  $jcc['node-component-summary'] = [
    'name' => t("Node Component Summary"),
    'description' => t('Summary snippet of the paragraph component field.'),
  ];

  return [
    'types' => ['jcc' => $type],
    'tokens' => ['jcc' => $jcc],
  ];
}

/**
 * Implements hook_tokens().
 */
function jcc_custom_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];
  if ($type == 'jcc' && isset($data['node']) && !empty($data['node'])) {
    $node = $data['node'];

    if (in_array($node->bundle(), ['landing_page', 'subpage'])) {

      /** @var \Drupal\Core\Render\RendererInterface $renderer */
      $renderer = \Drupal::service('renderer');

      foreach ($tokens as $name => $original) {
        switch ($name) {
          case 'node-component-summary':
            $field_components_view = $node->field_components->view('default');
            $summary = $renderer->renderRoot($field_components_view);
            $summary = strip_tags($summary);
            $summary = str_replace(
              ['&amp;', 'Expand all', 'Close all'],
              ['&', '', ''],
              $summary);
            $summary = str_replace($node->getTitle(), '', $summary);
            $summary = preg_replace('/\s+/', ' ', $summary);
            $summary = trim($summary);
            $summary = preg_replace('/\s+?(\S+)?$/', '', substr($summary, 0, 300));
            $replacements[$original] = $summary;
            break;
        }
      }
    }
  }
  return $replacements;
}

/**
 * Implements hook_form_alter().
 */
function jcc_custom_form_webform_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // tci-1277 fix.
  if ($form_id === 'webform_settings_confirmation_form') {
    if (isset($form['confirmation_type']['confirmation_type']['#options'])) {
      $form['confirmation_type']['confirmation_type']['#default_value'] = 'inline';
    }
  }
}
