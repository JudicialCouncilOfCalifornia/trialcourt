<?php

/**
 * @file
 * Updates for profile.
 */

use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\redirect\Entity\Redirect;

/**
 * Implements hook_install().
 */
function jcc_tc2_all_immutable_config_install() {
  // Create empty Sendgrid API key.
  $storage = \Drupal::entityTypeManager()->getStorage('key');
  if ($storage && !$storage->load('sendgrid')) {
    $args = [
      'id' => 'sendgrid',
      'label' => 'Sendgrid',
      'key_type' => 'authentication',
      'key_provider' => 'config',
    ];
    $key = $storage->create($args);
    $key->save();
  }
}

/**
 * Implements hook_update_dependencies().
 */
function jcc_tc2_all_immutable_config_update_dependencies() {
  $dependencies['search_api'][8107] = [
    'jcc_tc2_all_immutable_config' => 8035,
  ];

  return $dependencies;
}

/**
 * Remove field_media from news content type.
 */
function jcc_tc2_all_immutable_config_update_8001() {
  // Deleting field.
  $field = FieldConfig::loadByName('node', 'news', 'field_media');
  if (!empty($field)) {
    $field->delete();
  }
}

/**
 * Remove exposedformformssearch_forms block.
 */
function jcc_tc2_all_immutable_config_update_8002() {
  $block_storage = \Drupal::service('entity_type.manager')->getStorage('block');
  $blocks = $block_storage->loadMultiple();

  if (!empty($blocks['exposedformformssearch_forms'])) {
    $blocks['exposedformformssearch_forms']->delete();
  }
}

/**
 * Remove field_media from news content type.
 */
function jcc_tc2_all_immutable_config_update_8003() {
  // Deleting field.
  $field = FieldConfig::loadByName('node', 'news', 'field_media');
  if (!empty($field)) {
    $field->delete();
  }
}

/**
 * Remove exposedformformssearch_forms block.
 */
function jcc_tc2_all_immutable_config_update_8004() {
  $block_storage = \Drupal::service('entity_type.manager')->getStorage('block');
  $blocks = $block_storage->loadMultiple();

  if (!empty($blocks['exposedformformssearch_forms'])) {
    $blocks['exposedformformssearch_forms']->delete();
  }
}

/**
 * Install menu_admin_per_menu.
 */
function jcc_tc2_all_immutable_config_update_8005() {
  $modules = ['menu_admin_per_menu'];

  \Drupal::service('module_installer')->install($modules);
}

/**
 * TCI-437-438 Changing field_columns from list_integer to list_string.
 */
function jcc_tc2_all_immutable_config_update_8006() {

  $fields = [
    'field_columns' => [
      'table' => 'paragraph__field_columns',
      'revision_table' => 'paragraph_revision__field_columns',
    ],
  ];

  $database = \Drupal::database();

  foreach ($fields as $field_name => $f) {
    $table = $f['table'];
    $revision_table = $f['revision_table'];
    // Entity type here.
    $entity_type = 'paragraph';

    // Step 1: Get field storage.
    $field_storage = FieldStorageConfig::loadByName($entity_type, $field_name);

    // Check if field not found.
    if (is_null($field_storage)) {
      continue;
    }

    // Step 2: Store data.
    $rows = NULL;
    $revision_rows = NULL;
    if ($database->schema()->tableExists($table)) {
      // The table data to restore after the update is completed.
      $rows = $database->select($table, 'n')->fields('n')->execute()
        ->fetchAll();
      $revision_rows = $database->select($revision_table, 'n')->fields('n')->execute()
        ->fetchAll();
    }

    // Step 3: Save new field configs & delete existing fields.
    $new_fields = [];
    foreach ($field_storage->getBundles() as $bundle => $label) {
      $field = FieldConfig::loadByName($entity_type, $bundle, $field_name);
      $new_field = $field->toArray();
      $new_field['field_type'] = 'list_string';
      $new_fields[] = $new_field;
      // Delete field.
      $field->delete();
    }

    // Step 4: Create new storage configs from existing.
    $new_field_storage = $field_storage->toArray();
    $new_field_storage['type'] = 'list_string';
    $new_field_storage['module'] = 'options';
    $new_field_storage['settings'] = [
      'allowed_values' => [
        '1' => '1',
        '2-50-50' => '50% / 50%',
        '2-75-25' => '75% / 25%',
        '3' => '3',
        '4' => '4',
      ],
    ];

    // Step 5: Purge deleted fields data.
    // This is required to create new fields.
    field_purge_batch(250);

    // Step 6: Create new fieldstorage.
    FieldStorageConfig::create($new_field_storage)->save();

    // Step 7: Create new fields for all bundles.
    foreach ($new_fields as $new_field) {
      $new_field = FieldConfig::create($new_field);
      $new_field->save();
    }

    // Step 8: Restore existing data in fields & revision tables.
    if (!is_null($rows)) {
      foreach ($rows as $row) {
        $row = (array) $row;
        $database->insert($table)->fields($row)->execute();
      }
    }
    if (!is_null($revision_rows)) {
      foreach ($revision_rows as $row) {
        $row = (array) $row;
        $database->insert($revision_table)->fields($row)->execute();
      }
    }
  }
}

/**
 * Install role_delegation and userprotect.
 */
function jcc_tc2_all_immutable_config_update_8008() {
  $modules = ['role_delegation', 'userprotect'];

  \Drupal::service('module_installer')->install($modules);
}

/**
 * Install webforms and webforms ui.
 */
function jcc_tc2_all_immutable_config_update_8009() {
  $modules = ['webform', 'webform_ui'];

  \Drupal::service('module_installer')->install($modules);
}

/**
 * Install google_tag.
 */
function jcc_tc2_all_immutable_config_update_8010() {
  $modules = ['google_tag'];

  \Drupal::service('module_installer')->install($modules);
}

/**
 * Install 'tmgmt', 'tmgmt_content', 'tmgmt_file'.
 */
function jcc_tc2_all_immutable_config_update_8011() {
  $modules = ['tmgmt', 'tmgmt_content', 'tmgmt_file'];

  \Drupal::service('module_installer')->install($modules);
}

/**
 * Install 'mailsystem', 'sendgrid_integration'.
 */
function jcc_tc2_all_immutable_config_update_8012() {
  $modules = ['mailsystem', 'sendgrid_integration'];

  \Drupal::service('module_installer')->install($modules);
}

/**
 * Create empty Sendgrid key if needed.
 */
function jcc_tc2_all_immutable_config_update_8013() {
  $storage = \Drupal::entityTypeManager()->getStorage('key');

  if (!$key = $storage->load('sendgrid')) {
    $args = [
      'id' => 'sendgrid',
      'label' => 'Sendgrid',
      'key_type' => 'authentication',
      'key_provider' => 'config',
    ];
    $key = $storage->create($args);
    $key->save();
  }
}

/**
 * Install 'pantheon_advanced_page_cache'.
 */
function jcc_tc2_all_immutable_config_update_8014() {
  $modules = ['pantheon_advanced_page_cache'];

  \Drupal::service('module_installer')->install($modules);
}

/**
 * Update config ignore settings to correctly import config.
 */
function jcc_tc2_all_immutable_config_update_8015() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('config_ignore.settings');
  $ignored = $config->get('ignored_config_entities');
  array_push($ignored, '~webform.webform.was_this_helpful');
  $config->set('ignored_config_entities', $ignored);
  $config->save(TRUE);
}

/**
 * Install 'webform_translation_permissions'.
 */
function jcc_tc2_all_immutable_config_update_8016() {
  $modules = ['webform_translation_permissions'];

  \Drupal::service('module_installer')->install($modules);
}

/**
 * Copy media module icons into file directories.
 */
function jcc_tc2_all_immutable_config_update_8017() {
  module_load_include('install', 'media');
  media_install();
}

/**
 * Install 'entity_usage', 'media_revisions_ui' and 'media_text'.
 */
function jcc_tc2_all_immutable_config_update_8018() {
  $modules = [
    'entity_usage',
    'media_revisions_ui',
    'media_text',
  ];

  \Drupal::service('module_installer')->install($modules);
}

/**
 * Install 'captcha' and 'recaptcha'.
 */
function jcc_tc2_all_immutable_config_update_8019() {
  $modules = [
    'captcha',
    'recaptcha',
  ];

  \Drupal::service('module_installer')->install($modules);
}

/**
 * TCI-642: Install menu_admin_per_menu.
 */
function jcc_tc2_all_immutable_config_update_8020() {
  $modules = ['ban'];

  foreach ($modules as $module) {
    if (\Drupal::moduleHandler()->moduleExists($module)) {
      continue;
    }
    \Drupal::service('module_installer')->install([$module]);
  }
}

/**
 * TCI-642: Ban some ips.
 */
function jcc_tc2_all_immutable_config_update_8021() {
  $ban_manager = \Drupal::service('ban.ip_manager');
  $ips = [
    '103.123.25.63',
    '5.62.16.17',
    '35.243.231.177',
    '37.0.8.34',
    '134.122.72.91',
  ];

  foreach ($ips as $ip) {
    $ban_manager->banIp($ip);
  }

}

/**
 * TCI-718: Bulk Ban module.
 */
function jcc_tc2_all_immutable_config_update_8022() {
  $modules = ['bulk_ban'];

  foreach ($modules as $module) {
    if (\Drupal::moduleHandler()->moduleExists($module)) {
      continue;
    }
    \Drupal::service('module_installer')->install([$module]);
  }
}

/**
 * TCI-572: Mimemail module.
 */
function jcc_tc2_all_immutable_config_update_8023() {
  $modules = ['mimemail'];

  foreach ($modules as $module) {
    if (\Drupal::moduleHandler()->moduleExists($module)) {
      continue;
    }
    \Drupal::service('module_installer')->install([$module]);
  }
}

/**
 * Ensure new .module file gets loaded.
 */
function jcc_tc2_all_immutable_config_update_8024() {
  drupal_flush_all_caches();
  \Drupal::service('kernel')->rebuildContainer();
  // Load the module data which has been removed when the container was
  // rebuilt.
  $module_handler = \Drupal::moduleHandler();
  $module_handler->loadAll();
  $module_handler->invokeAll('rebuild');
}

/**
 * TCI-572: Mimemail module.
 */
function jcc_tc2_all_immutable_config_update_8025() {
  $modules = ['rest', 'serialization', 'webform_views'];

  foreach ($modules as $module) {
    if (\Drupal::moduleHandler()->moduleExists($module)) {
      continue;
    }
    \Drupal::service('module_installer')->install([$module]);
  }
}

/**
 * TCI-774: Update body paragraph field_text relative links missing lead slash.
 */
function jcc_tc2_all_immutable_config_update_8026() {

  $site_name = \Drupal::config('system.site')->get('name');

  if ($site_name == 'Superior Court of California | County of Alameda') {
    $count = 0;
    $updated = 0;

    $service = \Drupal::service('jcc_tc_migration.media_replace_file_link');
    $pids = \Drupal::entityQuery('paragraph')
      ->condition('type', 'body')
      ->execute();
    $paragraphs = Paragraph::loadMultiple($pids);
    $num = count($paragraphs);

    foreach ($paragraphs as $paragraph) {

      if (!$paragraph->field_text->isEmpty()) {
        $old_text = $paragraph->field_text->first()->getValue()['value'];
        $new_text = $service->replace($old_text);

        if (strcmp($old_text, $new_text) !== 0) {
          $updated++;
        }

        $paragraph->field_text->value = $new_text;
        $paragraph->field_text->format = 'snippet';
        $paragraph->save();
        $count++;
      }
    }

    \Drupal::messenger()->addStatus(
      t("%count of %num checked. %updated updated.",
        ['%count' => $count, '%num' => $num, '%updated' => $updated]
      )
    );
  }
  else {
    \Drupal::messenger()->addStatus(t('Alameda only, no changes.'));
  }
}

/**
 * TCI-783: fix field fromat from previous update hook.
 */
function jcc_tc2_all_immutable_config_update_8027() {

  $count = 0;
  $updated = 0;

  $pids = \Drupal::entityQuery('paragraph')
    ->condition('type', 'body')
    ->execute();
  $paragraphs = Paragraph::loadMultiple($pids);
  $num = count($paragraphs);

  foreach ($paragraphs as $paragraph) {

    if (!$paragraph->field_text->isEmpty()) {

      if ($paragraph->field_text->first()->format != 'body') {
        $updated++;
        $paragraph->field_text->format = 'body';
        $paragraph->save();
      }

      $count++;
    }
  }

  \Drupal::messenger()->addStatus(
    t("%count of %num checked. %updated updated.",
      ['%count' => $count, '%num' => $num, '%updated' => $updated]
    )
  );
}

/**
 * TCI-572: Protected pages module.
 */
function jcc_tc2_all_immutable_config_update_8028() {
  $modules = ['protected_pages'];

  foreach ($modules as $module) {
    if (\Drupal::moduleHandler()->moduleExists($module)) {
      continue;
    }
    \Drupal::service('module_installer')->install([$module]);
  }
}

/**
 * TCI-774: Update body paragraph field_text relative links missing lead slash.
 */
function jcc_tc2_all_immutable_config_update_8030() {

  $site_name = \Drupal::config('system.site')->get('name');

  if ($site_name == 'Superior Court of California | County of Alameda') {
    $count = 0;
    $updated = 0;

    $service = \Drupal::service('jcc_tc_migration.prefix_relative_links');
    $pids = \Drupal::entityQuery('paragraph')
      ->condition('type', 'body')
      ->execute();
    $paragraphs = Paragraph::loadMultiple($pids);
    $num = count($paragraphs);

    foreach ($paragraphs as $paragraph) {

      if (!$paragraph->field_text->isEmpty()) {
        $old_text = $paragraph->field_text->first()->getValue()['value'];
        $new_text = $service->replace($old_text);

        if (strcmp($old_text, $new_text) !== 0) {
          $updated++;
        }

        $paragraph->field_text->value = $new_text;
        $paragraph->field_text->format = 'body';
        $paragraph->save();
        $count++;
      }
    }

    \Drupal::messenger()->addStatus(
      t("%count of %num checked. %updated updated.",
        ['%count' => $count, '%num' => $num, '%updated' => $updated]
      )
    );
  }
  else {
    \Drupal::messenger()->addStatus(t('Alameda only, no changes.'));
  }
}

/**
 * TCI-832: Re-run 8027 because 8030 caused the same problem as 8026.
 */
function jcc_tc2_all_immutable_config_update_8031() {
  jcc_tc2_all_immutable_config_update_8027();
}

/**
 * Fix relative links on paragraphs for field_text.
 */
function jcc_tc2_all_immutable_config_update_8032() {
  jcc_tc2_all_immutable_config_prefix_paragraph_fields('field_text');
}

/**
 * Fix relative links on paragraphs for field_lead.
 */
function jcc_tc2_all_immutable_config_update_8033() {
  jcc_tc2_all_immutable_config_prefix_paragraph_fields('field_lead');
}

/**
 * Fix relative links on paragraphs for field_aside.
 */
function jcc_tc2_all_immutable_config_update_8034() {
  jcc_tc2_all_immutable_config_prefix_paragraph_fields('field_aside');
}

/**
 * TCI-774: Update body paragraph field_text relative links missing lead slash.
 */
function jcc_tc2_all_immutable_config_prefix_paragraph_fields($field_name) {

  $site_name = \Drupal::config('system.site')->get('name');

  if ($site_name == 'Superior Court of California | County of Alameda') {
    $count = 0;
    $updated = 0;
    $service = \Drupal::service('jcc_tc_migration.prefix_relative_links');
    $paragraph_types = [
      'accordion_item',
      'card',
      'step',
      'text_share',
      'body',
      'alert',
      'action_list_item',
    ];

    $pids = \Drupal::entityQuery('paragraph')
      ->condition('type', $paragraph_types, 'IN')
      ->execute();
    $paragraphs = Paragraph::loadMultiple($pids);
    $num = count($paragraphs);

    foreach ($paragraphs as $paragraph) {

      if (!empty($paragraph->$field_name) && !$paragraph->$field_name->isEmpty()) {
        $old_text = $paragraph->$field_name->first()->getValue()['value'];
        $new_text = $service->replace($old_text);

        if (strcmp($old_text, $new_text) !== 0) {
          $updated++;
        }

        $paragraph->$field_name->value = $new_text;
        $paragraph->$field_name->format = 'body';
        $paragraph->save();
        $count++;
      }
    }

    \Drupal::messenger()->addStatus(
      t("%count of %num checked. %updated updated.",
        ['%count' => $count, '%num' => $num, '%updated' => $updated]
      )
    );
  }
  else {
    \Drupal::messenger()->addStatus(t('Alameda only, no changes.'));
  }
}

/**
 * TCI-770: Mega Media Makeover Mod.
 */
function jcc_tc2_all_immutable_config_update_8040() {
  $modules = [
    'cshs',
    'file_delete',
    'file_replace',
    'filefield_paths',
    'media_entity_download',
    'media_entity_file_replace',
    'media_file_delete',
    'media_file_delete_entity_usage',
  ];

  foreach ($modules as $module) {
    if (\Drupal::moduleHandler()->moduleExists($module)) {
      continue;
    }
    \Drupal::service('module_installer')->install([$module]);
  }
}

/**
 * TCI-768: Preinstall filefield_paths and import feature config for batch.
 */
function jcc_tc2_all_immutable_config_update_8041() {
  $modules = ['filefield_paths'];

  foreach ($modules as $module) {
    if (\Drupal::moduleHandler()->moduleExists($module)) {
      continue;
    }
    \Drupal::service('module_installer')->install([$module]);
  }

  // Make sure config is imported first.
  \Drupal::service('features.manager')->import(['jcc_tc2_all_immutable_config']);
}

/**
 * TCI-768: move Media: Files to private directory.
 */
function jcc_tc2_all_immutable_config_update_8042(&$sandbox) {
  $bundle_fields = \Drupal::getContainer()->get('entity_field.manager')->getFieldDefinitions('media', 'file');
  $field_config = $bundle_fields['field_media_file'];
  /** @var Drupal\Core\Entity\ContentEntityStorageBase $entity_storage */
  $entity_storage = \Drupal::entityTypeManager()
    ->getStorage($field_config->getTargetEntityTypeId());

  if (!isset($sandbox['total'])) {
    $query = \Drupal::entityQuery('media');
    $result = $query->condition('bundle', 'file')
      ->condition("field_media_file.target_id", '', '<>')
      ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT')
      ->execute();

    $sandbox['total'] = count($result);
    $sandbox['current'] = 0;

    if (empty($sandbox['total'])) {
      $sandbox['#finished'] = 1;
      return;
    }
  }

  $batch_size = 25;

  $query = \Drupal::entityQuery('media');
  $result = $query->condition('bundle', 'file')
    ->condition("field_media_file.target_id", '', '<>')
    ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT')
    ->range($sandbox['current'], $batch_size)
    ->execute();

  if (empty($result)) {
    $sandbox['#finished'] = 1;
    return;
  }

  foreach ($result as $oid) {
    // For each oid, load the object, update the files and save it.
    $entity = $entity_storage->load($oid);

    // Remove file extensions from name before moving.
    $file = $entity->get('field_media_file')->entity;
    $extension = '.' . pathinfo($file->getFilename(), PATHINFO_EXTENSION);
    $label = $entity->label();
    $label = str_replace($extension, '', $label);
    $entity->setName($label);
    $entity->save();

    $sandbox['current']++;
  }

  \Drupal::messenger()
    ->addMessage($sandbox['current'] . ' Media processed.');

  if ($sandbox['current'] >= $sandbox['total']) {
    $sandbox['#finished'] = 1;
  }
  else {
    $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
  }
}

/**
 * TCI-768: move Media: Files to private directory.
 */
function jcc_tc2_all_immutable_config_update_8043(&$sandbox) {
  $bundle_fields = \Drupal::getContainer()->get('entity_field.manager')->getFieldDefinitions('media', 'file');
  $field_config = $bundle_fields['field_media_file'];
  /** @var Drupal\Core\Entity\ContentEntityStorageBase $entity_storage */
  $entity_storage = \Drupal::entityTypeManager()
    ->getStorage($field_config->getTargetEntityTypeId());

  if (!isset($sandbox['total'])) {
    $query = \Drupal::entityQuery('media');
    $result = $query->condition('bundle', 'file')
      ->condition("field_media_file.target_id", '', '<>')
      ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT')
      ->execute();

    $sandbox['total'] = count($result);
    $sandbox['current'] = 0;

    if (empty($sandbox['total'])) {
      $sandbox['#finished'] = 1;
      return;
    }
  }

  $batch_size = 25;

  $query = \Drupal::entityQuery('media');
  $result = $query->condition('bundle', 'file')
    ->condition("field_media_file.target_id", '', '<>')
    ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT')
    ->range($sandbox['current'], $batch_size)
    ->execute();

  if (empty($result)) {
    $sandbox['#finished'] = 1;
    return;
  }

  foreach ($result as $oid) {
    // For each oid, load the object, update the files and save it.
    $entity = $entity_storage->load($oid);

    // Enable active updating if it isn't already enabled.
    $active_updating = $field_config->getThirdPartySetting('filefield_paths', 'active_updating');
    if (!$active_updating) {
      $field_config->setThirdPartySetting('filefield_paths', 'active_updating', TRUE);
      $field_config->save();
    }

    $entity->original = $entity;
    filefield_paths_entity_update($entity);

    // Restore active updating to it's previous state if necessary.
    if (!$active_updating) {
      $field_config->setThirdPartySetting('filefield_paths', 'active_updating', $active_updating);
      $field_config->save();
    }
    $sandbox['current']++;
  }

  \Drupal::messenger()
    ->addMessage($sandbox['current'] . ' files processed.');

  if ($sandbox['current'] >= $sandbox['total']) {
    $sandbox['#finished'] = 1;
  }
  else {
    $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
  }
}

/**
 * TCI-925: Clean up redirects after media update caused 404s.
 */
function jcc_tc2_all_immutable_config_update_8044() {
  $database = \Drupal::database();
  $query = $database->select('file_managed', 'fm')
    ->fields('fm', ['uri'])
    ->condition('uri', "private://%", 'LIKE')
    ->execute();

  foreach ($query->fetchCol() as $uri) {
    $file_uris[] = str_replace("private://", "system/files/", $uri);
  }

  $query = $database->select('redirect', 'r')
    ->fields('r', ['rid', 'redirect_source__path'])
    ->condition('redirect_source__path', "system/files%", 'LIKE')
    ->execute();

  $redirects = $query->fetchAllAssoc('redirect_source__path');

  foreach ($redirects as $key => $redirect) {
    if (in_array($key, $file_uris)) {
      $remove_rids[] = $redirect->rid;
      $redirect = Redirect::load($redirect->rid);
      $redirect->delete();

      \Drupal::messenger()
        ->addMessage("Redirect deleted from: " . $key);
    }
  }
}

/**
 * TCI-925: Clean up redirects after media update caused 404s.
 */
function jcc_tc2_all_immutable_config_update_8045() {
  $database = \Drupal::database();
  $chains = [];

  $query = $database->select('redirect', 'r')
    ->fields('r', ['rid', 'redirect_source__path', 'redirect_redirect__uri'])
    ->execute();

  $targets = $query->fetchAllAssoc('rid');

  foreach ($targets as $target_rid => $target) {
    $query = $database->select('redirect', 'r')
      ->fields('r', ['rid', 'redirect_source__path', 'redirect_redirect__uri'])
      ->condition('redirect_redirect__uri', "internal:/" . $target->redirect_source__path, 'LIKE')
      ->execute();

    $matches = $query->fetchAllAssoc('rid');

    if (!empty($matches)) {
      $chains[$target_rid] = [
        'target' => $target,
        'sources' => $matches,
      ];
    }
  }

  $count = 0;
  foreach ($chains as $target_rid => $chain) {
    foreach ($chain['sources'] as $source_id => $source) {
      $source_path = $source->redirect_source__path;
      $target_uri = str_replace("internal:", "", $chain['target']->redirect_redirect__uri);

      if ("/$source_path" != $target_uri) {
        \Drupal::messenger()->addMessage($source->redirect_source__path . " --> " . $target_uri);
        $redirect = Redirect::load($source_id);
        $redirect->setRedirect($target_uri);
        $redirect->save();
        $count++;
      }
    }
  }
  \Drupal::messenger()->addMessage($count . ", redirects updated.");
}

/**
 * TCI-925: one more pass seems to do it.
 */
function jcc_tc2_all_immutable_config_update_8046() {
  jcc_tc2_all_immutable_config_update_8044();
  jcc_tc2_all_immutable_config_update_8045();
}

/**
 * Remove duplicate tasks from search_api_tasks table.
 *
 * See jcc_tc2_all_immutable_config_update_dependencies().
 */
function jcc_tc2_all_immutable_config_update_8035() {
  $database = \Drupal::database();
  $count = $database->query('
    DELETE t1 FROM search_api_task t1
    INNER JOIN search_api_task t2
    WHERE
      t1.id < t2.id AND
      t1.data = t2.data;
  ')
    ->execute();
  \Drupal::messenger()->addStatus(t('Removed :count duplicate search api task(s)', [':count' => $count]));
}

/**
 * TCI-928: Node access rebuild.
 */
function jcc_tc2_all_immutable_config_update_9001() {
  \Drupal::service('features.manager')->import(['jcc_tc2_all_immutable_config']);

  node_access_rebuild(TRUE);
}

/**
 * TCI-981: Fix redirect loop when updating webform config.
 */
function jcc_tc2_all_immutable_config_update_9002() {
  $database = \Drupal::database();
  $webform_storage = \Drupal::entityTypeManager()->getStorage('webform');
  $redirect_storage = \Drupal::entityTypeManager()->getStorage('redirect');

  // Get form path aliases that are missing the leading /.
  $query = $database->select('path_alias', 'pa')
    ->fields('pa', ['path'])
    ->condition('alias', 'form/%', 'LIKE')
    ->execute();

  while ($row = $query->fetchAssoc()) {
    $replace = [
      '/webform/',
      '/confirmation',
      '/submissions',
      '/drafts',
    ];

    $id = str_replace($replace, '', $row['path']);
    $webform_ids[$id] = $id;
    $uri = "internal:" . $row['path'];

    // Delete the existing redirects for the bad webform path.
    $redirect_ids = \Drupal::entityQuery('redirect')
      ->condition('redirect_redirect__uri', $uri)
      ->execute();

    $redirects = $redirect_storage->loadMultiple($redirect_ids);

    foreach ($redirects as $redirect) {
      $redirect->delete();
    }
  }

  // Add the leading / to the path alias.
  $query = $database->update('path_alias')
    ->condition('alias', 'form%', 'LIKE')
    ->expression('alias', 'CONCAT(:slash, alias)', [':slash' => '/'])
    ->execute();

  if (empty($webform_ids)) {
    \Drupal::messenger()->addStatus(
      t("No webforms to update.")
    );
    return;
  }

  // Re-save affected webforms to regenerate alias and redirects.
  $webforms = $webform_storage->loadMultiple($webform_ids);

  foreach ($webforms as $webform) {
    \Drupal::messenger()->addStatus(
      t("Updating alias and redirects for webform: %label",
        ['%label' => $webform->label()]
      )
    );

    $webform->save();
  }
}
