<?php

/**
 * @file
 * Updates for profile.
 */

use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;

/**
 * Implements hook_install().
 */
function jcc_tc2_all_immutable_config_install() {
  // Create empty Sendgrid API key.
  $storage = \Drupal::entityTypeManager()->getStorage('key');
  if ($storage && !$storage->load('sendgrid')) {
    $args = [
      'id' => 'sendgrid',
      'label' => 'Sendgrid',
      'key_type' => 'authentication',
      'key_provider' => 'config',
    ];
    $key = $storage->create($args);
    $key->save();
  }
}

/**
 * Remove field_media from news content type.
 */
function jcc_tc2_all_immutable_config_update_8001() {
  // Deleting field.
  $field = FieldConfig::loadByName('node', 'news', 'field_media');
  if (!empty($field)) {
    $field->delete();
  }
}

/**
 * Remove exposedformformssearch_forms block.
 */
function jcc_tc2_all_immutable_config_update_8002() {
  $block_storage = \Drupal::service('entity_type.manager')->getStorage('block');
  $blocks = $block_storage->loadMultiple();

  if (!empty($blocks['exposedformformssearch_forms'])) {
    $blocks['exposedformformssearch_forms']->delete();
  }
}

/**
 * Remove field_media from news content type.
 */
function jcc_tc2_all_immutable_config_update_8003() {
  // Deleting field.
  $field = FieldConfig::loadByName('node', 'news', 'field_media');
  if (!empty($field)) {
    $field->delete();
  }
}

/**
 * Remove exposedformformssearch_forms block.
 */
function jcc_tc2_all_immutable_config_update_8004() {
  $block_storage = \Drupal::service('entity_type.manager')->getStorage('block');
  $blocks = $block_storage->loadMultiple();

  if (!empty($blocks['exposedformformssearch_forms'])) {
    $blocks['exposedformformssearch_forms']->delete();
  }
}

/**
 * Install menu_admin_per_menu.
 */
function jcc_tc2_all_immutable_config_update_8005() {
  $modules = ['menu_admin_per_menu'];

  \Drupal::service('module_installer')->install($modules);
}

/**
 * TCI-437-438 Changing field_columns from list_integer to list_string.
 */
function jcc_tc2_all_immutable_config_update_8006() {

  $fields = [
    'field_columns' => [
      'table' => 'paragraph__field_columns',
      'revision_table' => 'paragraph_revision__field_columns',
    ],
  ];

  $database = \Drupal::database();

  foreach ($fields as $field_name => $f) {
    $table = $f['table'];
    $revision_table = $f['revision_table'];
    // Entity type here.
    $entity_type = 'paragraph';

    // Step 1: Get field storage.
    $field_storage = FieldStorageConfig::loadByName($entity_type, $field_name);

    // Check if field not found.
    if (is_null($field_storage)) {
      continue;
    }

    // Step 2: Store data.
    $rows = NULL;
    $revision_rows = NULL;
    if ($database->schema()->tableExists($table)) {
      // The table data to restore after the update is completed.
      $rows = $database->select($table, 'n')->fields('n')->execute()
        ->fetchAll();
      $revision_rows = $database->select($revision_table, 'n')->fields('n')->execute()
        ->fetchAll();
    }

    // Step 3: Save new field configs & delete existing fields.
    $new_fields = [];
    foreach ($field_storage->getBundles() as $bundle => $label) {
      $field = FieldConfig::loadByName($entity_type, $bundle, $field_name);
      $new_field = $field->toArray();
      $new_field['field_type'] = 'list_string';
      $new_fields[] = $new_field;
      // Delete field.
      $field->delete();
    }

    // Step 4: Create new storage configs from existing.
    $new_field_storage = $field_storage->toArray();
    $new_field_storage['type'] = 'list_string';
    $new_field_storage['module'] = 'options';
    $new_field_storage['settings'] = [
      'allowed_values' => [
        '1' => '1',
        '2-50-50' => '50% / 50%',
        '2-75-25' => '75% / 25%',
        '3' => '3',
        '4' => '4',
      ],
    ];

    // Step 5: Purge deleted fields data.
    // This is required to create new fields.
    field_purge_batch(250);

    // Step 6: Create new fieldstorage.
    FieldStorageConfig::create($new_field_storage)->save();

    // Step 7: Create new fields for all bundles.
    foreach ($new_fields as $new_field) {
      $new_field = FieldConfig::create($new_field);
      $new_field->save();
    }

    // Step 8: Restore existing data in fields & revision tables.
    if (!is_null($rows)) {
      foreach ($rows as $row) {
        $row = (array) $row;
        $database->insert($table)->fields($row)->execute();
      }
    }
    if (!is_null($revision_rows)) {
      foreach ($revision_rows as $row) {
        $row = (array) $row;
        $database->insert($revision_table)->fields($row)->execute();
      }
    }
  }
}

/**
 * Install ckeditor_inserthtml.
 */
function jcc_tc2_all_immutable_config_update_8007() {
  $modules = ['ckeditor_inserthtml'];

  \Drupal::service('module_installer')->install($modules);
}

/**
 * Install role_delegation and userprotect.
 */
function jcc_tc2_all_immutable_config_update_8008() {
  $modules = ['role_delegation', 'userprotect'];

  \Drupal::service('module_installer')->install($modules);
}

/**
 * Install webforms and webforms ui.
 */
function jcc_tc2_all_immutable_config_update_8009() {
  $modules = ['webform', 'webform_ui'];

  \Drupal::service('module_installer')->install($modules);
}

/**
 * Install google_tag.
 */
function jcc_tc2_all_immutable_config_update_8010() {
  $modules = ['google_tag'];

  \Drupal::service('module_installer')->install($modules);
}

/**
 * Install 'tmgmt', 'tmgmt_content', 'tmgmt_file'.
 */
function jcc_tc2_all_immutable_config_update_8011() {
  $modules = ['tmgmt', 'tmgmt_content', 'tmgmt_file'];

  \Drupal::service('module_installer')->install($modules);
}

/**
 * Install 'mailsystem', 'sendgrid_integration'.
 */
function jcc_tc2_all_immutable_config_update_8012() {
  $modules = ['mailsystem', 'sendgrid_integration'];

  \Drupal::service('module_installer')->install($modules);
}

/**
 * Create empty Sendgrid key if needed.
 */
function jcc_tc2_all_immutable_config_update_8013() {
  $storage = \Drupal::entityTypeManager()->getStorage('key');

  if (!$key = $storage->load('sendgrid')) {
    $args = [
      'id' => 'sendgrid',
      'label' => 'Sendgrid',
      'key_type' => 'authentication',
      'key_provider' => 'config',
    ];
    $key = $storage->create($args);
    $key->save();
  }
}

/**
 * Install 'pantheon_advanced_page_cache'.
 */
function jcc_tc2_all_immutable_config_update_8014() {
  $modules = ['pantheon_advanced_page_cache'];

  \Drupal::service('module_installer')->install($modules);
}

/**
 * Update config ignore settings to correctly import config.
 */
function jcc_tc2_all_immutable_config_update_8015() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('config_ignore.settings');
  $ignored = $config->get('ignored_config_entities');
  array_push($ignored, '~webform.webform.was_this_helpful');
  $config->set('ignored_config_entities', $ignored);
  $config->save(TRUE);
}

/**
 * Install 'webform_translation_permissions'.
 */
function jcc_tc2_all_immutable_config_update_8016() {
  $modules = ['webform_translation_permissions'];

  \Drupal::service('module_installer')->install($modules);
}

/**
 * Copy media module icons into file directories.
 */
function jcc_tc2_all_immutable_config_update_8017() {
  module_load_include('install', 'media');
  media_install();
}

/**
 * Install 'entity_usage', 'media_revisions_ui' and 'media_text'.
 */
function jcc_tc2_all_immutable_config_update_8018() {
  $modules = [
    'entity_usage',
    'media_revisions_ui',
    'media_text',
  ];

  \Drupal::service('module_installer')->install($modules);
}

/**
 * Install 'captcha' and 'recaptcha'.
 */
function jcc_tc2_all_immutable_config_update_8019() {
  $modules = [
    'captcha',
    'recaptcha',
  ];

  \Drupal::service('module_installer')->install($modules);
}

/**
 * TCI-642: Install menu_admin_per_menu.
 */
function jcc_tc2_all_immutable_config_update_8020() {
  $modules = ['ban'];
  
  foreach ($modules as $module) {
    if (\Drupal::moduleHandler()->moduleExists($module)) {
      continue;
    }
    \Drupal::service('module_installer')->install([$module]);
  }
}

/**
 * TCI-642: Ban some ips.
 */
function jcc_tc2_all_immutable_config_update_8021() {
  $ban_manager = \Drupal::service('ban.ip_manager');
  $ips = [
    '103.123.25.63',
    '5.62.16.17',
    '35.243.231.177',
    '37.0.8.34',
    '134.122.72.91',
  ];

  foreach ($ips as $ip) {
    $ban_manager->banIp($ip);
  }

}
