<?php

/**
 * @file
 * Functions for jcc_tc2_all_immutable_config.module.
 */

/**
 * Implements hook_config_ignore_settings_alter().
 */
function jcc_tc2_all_immutable_config_config_ignore_settings_alter(array &$settings) {
  // Ignore any config that exists in this module's config/install.
  $module_handler = \Drupal::service('module_handler');
  $module_path = $module_handler->getModule('jcc_tc2_all_immutable_config')->getPath();
  $paths[] = "${module_path}/config/install";

  foreach ($paths as $path) {
    $config = scandir($path);
    foreach ($config as $item) {
      $name = str_replace('.yml', '', $item);
      if (strpos($name, '.') !== 0 && !in_array($name, $settings)) {
        $settings[] = $name;
      }
    }
  }
}

/**
 * Fix the text format for given field and format.
 *
 * @param string $field
 *   The machine name of the field to update.
 * @param string $format
 *   The machine name of the format to set.
 * @param string $bundle
 *   The bundle to update. If NULL all will be udpated.
 * @param string $entity_type
 *   The entity type to query for update.
 */
function jcc_tc2_all_immutable_config_format_fix($field, $format, $bundle = NULL, $entity_type = 'paragraph') {
  $count = 0;
  $updated = 0;

  $ids = \Drupal::entityQuery($entity_type)
    ->exists($field)
    ->execute();

  $entities = \Drupal::entityTypeManager()->getStorage($entity_type)->loadMultiple($ids);

  $num = count($entities);

  foreach ($entities as $entity) {

    if (!empty($entity->$field) && !$entity->$field->isEmpty()) {
      if ($bundle && $entity->bundle() != $bundle) {
        continue;
      }

      if ($entity->$field->first()->format != $format) {
        $updated++;
        $entity->$field->format = $format;
        $entity->save();
      }

      $count++;
    }
  }

  \Drupal::messenger()->addStatus(
    t("%count of %num checked. %updated updated.",
      ['%count' => $count, '%num' => $num, '%updated' => $updated]
    )
  );
}

/**
 * Fix relative links missing leading slash in field content.
 *
 * @param string $field
 *   The machine name of the field to check.
 * @param string $entity_type
 *   The entity type to query.
 */
function jcc_tc2_all_immutable_config_fix_relative_links($field, $entity_type = 'paragraph') {

  $count = 0;
  $updated = 0;
  $service = \Drupal::service('jcc_tc_migration.prefix_relative_links');

  $ids = \Drupal::entityQuery($entity_type)
    ->exists($field)
    ->execute();

  $entities = \Drupal::entityTypeManager()
    ->getStorage($entity_type)
    ->loadMultiple($ids);

  $num = count($entities);

  foreach ($entities as $entity) {

    if (!empty($entity->$field) && !$entity->$field->isEmpty()) {
      $old_text = $entity->$field->first()->getValue()['value'];
      $new_text = $service->replace($old_text);

      if (strcmp($old_text, $new_text) !== 0) {
        $updated++;
      }

      $entity->$field->value = $new_text;
      $entity->save();
      $count++;
    }
  }

  \Drupal::messenger()->addStatus(
    t("%count of %num checked. %updated updated.",
      ['%count' => $count, '%num' => $num, '%updated' => $updated]
    )
  );
}

/**
 * Fix mailto links that received a leading slash from the previous link fix :\.
 *
 * @param string $field
 *   The machine name of the field to check.
 * @param string $entity_type
 *   The entity type to query.
 */
function jcc_tc2_all_immutable_config_fix_mailto_links($field, $entity_type = 'paragraph') {

  $count = 0;
  $updated = 0;

  $ids = \Drupal::entityQuery($entity_type)
    ->exists($field)
    ->execute();

  $entities = \Drupal::entityTypeManager()
    ->getStorage($entity_type)
    ->loadMultiple($ids);

  $num = count($entities);

  foreach ($entities as $entity) {

    if (!empty($entity->$field) && !$entity->$field->isEmpty()) {
      $old_text = $entity->$field->first()->getValue()['value'];
      $new_text = jcc_tc2_all_immutable_config_replace_mailto($old_text);

      if (strcmp($old_text, $new_text) !== 0) {
        $updated++;
      }

      $entity->$field->value = $new_text;
      $entity->save();
      $count++;
    }
  }

  \Drupal::messenger()->addStatus(
    t("%count of %num checked. %updated updated.",
      ['%count' => $count, '%num' => $num, '%updated' => $updated]
    )
  );
}

/**
 * Search content for mailto links and remove leading slash as necessary.
 *
 * @param string $content
 *   The content to search.
 *
 * @return string
 *   The content with any necessary modifications.
 */
function jcc_tc2_all_immutable_config_replace_mailto($content) {
  $dom = new \DomDocument();
  $dom->loadHTML($content);

  foreach ($dom->getElementsByTagName('a') as $item) {
    // The original link string that will be replaced.
    $original = $dom->saveHTML($item);
    // The url for the link to determine file name.
    $href = $item->getAttribute('href');
    $scheme = parse_url($href, PHP_URL_SCHEME);
    // Add leading slash to original link if needed.
    if ($scheme == 'mailto') {
      $path = parse_url($href, PHP_URL_PATH);
      if (strpos($path, '/') === 0) {
        $new_path = ltrim($path, '/');
        // Create full replacement link.
        $replace = str_replace($path, $new_path, $original);
        // Replace the original link string in the full markup in $content.
        $content = str_replace($original, $replace, $content);
      }
    }
  }

  return $content;
}
